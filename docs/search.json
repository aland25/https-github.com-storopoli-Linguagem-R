{
  "articles": [
    {
      "path": "1-O_que_e_R.html",
      "title": "O que é R?",
      "description": "Tipos de Varíaveis e Estrutura de Dados",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 5, 2021",
      "contents": "\n\nContents\nConteúdos\nProfessor\nO que é R?\nTipos de Variáveis do R\nEstruturas de Dados\nO que podemos fazer com vetores e listas?\ndata.frames e tibbles\n\nVetores Especiais – factor\nValores Especiais\npacote::funcao()\nAmbiente\n\n\nBem vindos à disciplina!\n\n\n\nFigure 1: Bem-vindo!\n\n\n\nConteúdos\nVamos usar todo o universo do {tidyverse}!\nAula 1 - O que é R?\nAula 2 e 3 — dplyr e manipulação de dados\nAula 4 e 5 — ggplot2 e visualização de dados\nAula 6 — Programação funcional com purrr e furrr\nAula 7 — Regressão Linear e Regressão Logística\nProfessor\nJosé Eduardo Storopoli (Duda)\nO que é R?\nR vem da linguagem S que é uma linguagem estatística desenvolvida na Bell Labs na década de 1970s. E R é o “filho” opensource do S.\nRmarkdown é uma boa combinação de gráficos, narrativa e código. Veja o exemplo da figura abaixo.\n\n\n\nFigure 2: Exemplo de um Plot em R\n\n\n\nTipos de Variáveis do R\nnumeric\ninteger\ndouble\n\nlogical\ncharacter\n\n\ntypeof(1L)\n\n\n[1] \"integer\"\n\ntypeof(1.0)\n\n\n[1] \"double\"\n\ntypeof(TRUE)\n\n\n[1] \"logical\"\n\ntypeof(\"Oi!\")\n\n\n[1] \"character\"\n\nis.numeric(1)\n\n\n[1] TRUE\n\nEstruturas de Dados\nMesmo tipo de variáveis:\n1-D: Vetores c(...)\n2-D: Matrizes matrix()\nN-D: Arrays array()\n\nTipos diferentes de variáveis:\n1-D: Listas list(...)\n2-D: Dataframes data.frame(...) ou tibble(...)\n\n\nOBS: Para designar podemos usar o x = valor, mas usamos o <- pois não permite equivalência ela assinala tudo que está a direita da flecha para a variável à esquerda da flecha. Ex x <- valor (similar ao x := valor). Inclusive alt + - gera um <- com um whitespace ao redor.\n\n\n\nvetor_integer <- c(1L, 7L:9L)\nvetor_integer\n\n\n[1] 1 7 8 9\n\ntypeof(vetor_integer)\n\n\n[1] \"integer\"\n\nis.numeric(vetor_integer)\n\n\n[1] TRUE\n\nvetor_doubles <- c(1, 7:9)\nvetor_doubles\n\n\n[1] 1 7 8 9\n\ntypeof(vetor_doubles)\n\n\n[1] \"double\"\n\nis.numeric(vetor_doubles)\n\n\n[1] TRUE\n\nvetor_logical <- c(TRUE, FALSE)\nvetor_logical\n\n\n[1]  TRUE FALSE\n\ntypeof(vetor_logical)\n\n\n[1] \"logical\"\n\nvetor_character <- c(\"Oi!\", \"Tchau!\")\nvetor_character\n\n\n[1] \"Oi!\"    \"Tchau!\"\n\ntypeof(vetor_character)\n\n\n[1] \"character\"\n\n\n\nlista_mista <- list(\"Oi!\", TRUE, 1L)\ntypeof(lista_mista)\n\n\n[1] \"list\"\n\nvetor_coerce <- c(\"Oi!\", TRUE, 1L)\nvetor_coerce\n\n\n[1] \"Oi!\"  \"TRUE\" \"1\"   \n\ntypeof(vetor_coerce)\n\n\n[1] \"character\"\n\n\nOBS: Named List\n\n\n\nlista_nomeada <- list(\n  \"character\" = \"Oi!\",\n  \"logical\" = TRUE,\n  \"integer\" = 1L\n)\n\nstr(lista_nomeada)\n\n\nList of 3\n $ character: chr \"Oi!\"\n $ logical  : logi TRUE\n $ integer  : int 1\n\nO que podemos fazer com vetores e listas?\ndimensões - dim()\ncomprimento - length()\nIndexar:\nlista[1] - retornará sempre uma list\nlista[[1]] - retornará sempre um elemento\nlista$1 atalho para lista[[\"1\"]]\nlista$nome - atalho para lista[[\"nome\"]]\nlista[\"nome\"] - retonará sempre uma list\nlista[[\"nome\"]] - retornará sempre uma list\n\nFatiar:\nlista[1:30]\n\n\n\nstr(lista_nomeada[1])\n\n\nList of 1\n $ character: chr \"Oi!\"\n\nstr(lista_nomeada[[1]])\n\n\n chr \"Oi!\"\n\nstr(lista_nomeada$logical)\n\n\n logi TRUE\n\nstr(lista_nomeada[[\"logical\"]])\n\n\n logi TRUE\n\nstr(lista_nomeada[\"character\"])\n\n\nList of 1\n $ character: chr \"Oi!\"\n\nstr(lista_nomeada[1:2])\n\n\nList of 2\n $ character: chr \"Oi!\"\n $ logical  : logi TRUE\n\ndata.frames e tibbles\n\n\ndf <- data.frame(\n  a = sample(c(\"A\", \"B\"), 100, replace = TRUE),\n  x = runif(100),\n  y = rnorm(100),\n  dia = \"hoje\"\n)\ndf\n\n\n    a     x      y  dia\n1   B 0.135  0.253 hoje\n2   B 0.371 -0.721 hoje\n3   A 0.645  1.874 hoje\n4   A 0.669 -1.208 hoje\n5   A 0.428  1.126 hoje\n6   B 0.392 -0.186 hoje\n7   B 0.096 -1.302 hoje\n8   B 0.812  0.038 hoje\n9   A 0.831  0.767 hoje\n10  A 0.339 -1.684 hoje\n11  B 0.919 -1.093 hoje\n12  A 0.441 -0.058 hoje\n13  B 0.012  0.974 hoje\n14  B 0.027  2.844 hoje\n15  B 0.244  0.777 hoje\n16  A 0.860  0.037 hoje\n17  A 0.600  0.768 hoje\n18  A 0.779 -1.209 hoje\n19  A 0.512 -1.371 hoje\n20  A 0.272 -0.192 hoje\n21  B 0.877  0.153 hoje\n22  A 0.240  0.947 hoje\n23  A 0.255 -0.804 hoje\n24  B 0.767  0.254 hoje\n25  A 0.494 -0.751 hoje\n26  A 0.959  0.966 hoje\n27  B 0.891 -1.680 hoje\n28  A 0.835 -0.051 hoje\n29  A 0.903  0.853 hoje\n30  A 0.267 -0.136 hoje\n31  A 0.625  1.789 hoje\n32  A 0.613  0.366 hoje\n33  B 0.426 -0.010 hoje\n34  B 0.975 -1.297 hoje\n35  A 0.080 -1.636 hoje\n36  A 0.580  0.562 hoje\n37  A 0.901  0.064 hoje\n38  A 0.918 -1.258 hoje\n39  A 0.435 -0.618 hoje\n40  B 0.148  0.497 hoje\n41  A 0.952 -0.866 hoje\n42  B 0.677 -0.929 hoje\n43  A 0.762 -0.600 hoje\n44  B 0.123  0.403 hoje\n45  B 0.213  0.704 hoje\n46  B 0.586  0.416 hoje\n47  B 0.525  0.675 hoje\n48  A 0.617  1.460 hoje\n49  B 0.798 -0.780 hoje\n50  A 0.021  0.647 hoje\n51  A 0.228  1.178 hoje\n52  B 0.338 -0.445 hoje\n53  B 0.204  0.278 hoje\n54  A 0.655 -0.542 hoje\n55  A 0.310 -0.992 hoje\n56  B 0.473  0.206 hoje\n57  A 0.166 -1.841 hoje\n58  B 0.585  0.432 hoje\n59  B 0.170  0.333 hoje\n60  A 0.047 -0.758 hoje\n61  B 0.682 -0.388 hoje\n62  B 0.617 -1.464 hoje\n63  B 0.379  0.057 hoje\n64  A 0.649 -1.467 hoje\n65  A 0.355 -0.956 hoje\n66  B 0.350  0.128 hoje\n67  A 0.334 -0.015 hoje\n68  A 0.128 -0.523 hoje\n69  A 0.816 -0.841 hoje\n70  B 0.903  0.866 hoje\n71  B 0.752 -1.099 hoje\n72  B 0.585  0.334 hoje\n73  B 0.768 -0.151 hoje\n74  B 0.345 -0.680 hoje\n75  B 0.031 -1.159 hoje\n76  A 0.777  0.212 hoje\n77  A 0.212 -0.847 hoje\n78  A 0.620 -0.364 hoje\n79  A 0.786  0.990 hoje\n80  B 0.085  0.054 hoje\n81  B 0.681  0.464 hoje\n82  B 0.822  0.205 hoje\n83  B 0.735  0.931 hoje\n84  A 0.584  1.433 hoje\n85  B 0.945  1.953 hoje\n86  B 0.761 -1.195 hoje\n87  B 0.477 -0.099 hoje\n88  A 0.032  0.694 hoje\n89  B 0.841 -0.338 hoje\n90  B 0.818 -0.719 hoje\n91  A 0.893 -0.732 hoje\n92  B 0.498 -0.599 hoje\n93  A 0.953 -1.588 hoje\n94  B 0.849 -1.567 hoje\n95  A 0.282 -0.882 hoje\n96  B 0.724 -0.525 hoje\n97  A 0.147 -0.050 hoje\n98  A 0.795 -1.241 hoje\n99  B 0.065 -0.928 hoje\n100 A 0.384  1.181 hoje\n\nPara solucionar a facilidade de visualização e inspeção de data.frames o {tidyverse} possui uma estrutura de dados chamada tibble:\n\n\nlibrary(tibble)\nconvert_df <- as_tibble(df)\nstr(convert_df)\n\n\ntibble[,4] [100 × 4] (S3: tbl_df/tbl/data.frame)\n $ a  : chr [1:100] \"B\" \"B\" \"A\" \"A\" ...\n $ x  : num [1:100] 0.135 0.371 0.645 0.669 0.428 ...\n $ y  : num [1:100] 0.253 -0.721 1.874 -1.208 1.126 ...\n $ dia: chr [1:100] \"hoje\" \"hoje\" \"hoje\" \"hoje\" ...\n\nOutra vantagem do tibble é que eu consigo criar colunas com base em colunas “passadas”. Por exemplo isso dá um erro com a função data.frame:\n\n\ndf_error <- data.frame(\n  a = 1:10,\n  b = a + 1\n)\n\n\n\nJá no tibble eu consigo!\n\n\ntbl <- tibble(\n  a = 1:10,\n  b = a + 1\n)\ntbl_complexa <- tibble(\n  idade_ano = rnorm(100, mean = 30, sd = 10),\n  altura_cm = rnorm(100, mean = 165, sd = 10),\n  peso_kg = rnorm(100, mean = 70, sd = 10),\n  IMC = peso_kg / (altura_cm ^ 2),\n  glicose = rexp(100, rate = IMC / 10)\n)\ntbl_complexa\n\n\n# A tibble: 100 x 5\n   idade_ano altura_cm peso_kg     IMC glicose\n       <dbl>     <dbl>   <dbl>   <dbl>   <dbl>\n 1      20.7      152.    66.9 0.00288   1696.\n 2      34.9      157.    73.5 0.00299   2011.\n 3      17.4      162.    61.6 0.00234   7197.\n 4      37.4      164.    71.9 0.00267   2160.\n 5      31.1      171.    83.0 0.00283   1652.\n 6      26.0      158.    85.1 0.00340   3828.\n 7      17.9      150.    77.3 0.00343   2045.\n 8      40.1      181.    89.6 0.00275   3144.\n 9      29.7      180.    65.9 0.00204    785.\n10      34.9      162.    55.2 0.00209  10279.\n# … with 90 more rows\n\nVetores Especiais – factor\nfactor são fatores, que para “estatísticos” é variáveis qualitativas (veja o caso da ANOVA).\nfactor é especial pq ele no fundo é um vetor de integer sendo que cada integer é uma categoria diferentes.\n\n\nvetor_factor <- factor(c(\"A\", \"B\", \"C\"))\nstr(vetor_factor)\n\n\n Factor w/ 3 levels \"A\",\"B\",\"C\": 1 2 3\n\ntypeof(vetor_factor)\n\n\n[1] \"integer\"\n\nclass(vetor_factor)\n\n\n[1] \"factor\"\n\nunclass(vetor_factor)\n\n\n[1] 1 2 3\nattr(,\"levels\")\n[1] \"A\" \"B\" \"C\"\n\nValores Especiais\natômicos integer, logical e character: apenas um — NA\natômicos double: quatro — NA, NaN, Inf e -Inf\nvetores:\nNA - logical\nNA_integer_ - integer\nNA_real_ - double\nNA_character_ - character\n\npacote::funcao()\nÀs vezes diferentes funções possuem o mesmo nome. Como que resolvemos esse conflito de namespace.\nSimples! Nós chamamos a função com pacote::funcao()\nExemplo tibble::as_tibble()\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.5 (2021-03-31)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] tibble_3.1.0\n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13   knitr_1.31        magrittr_2.0.1   \n [4] downlit_0.2.1     R6_2.5.0          ragg_1.1.2       \n [7] rlang_0.4.10      fansi_0.4.2       stringr_1.4.0    \n[10] highr_0.8         tools_4.0.5       parallel_4.0.5   \n[13] xfun_0.22         png_0.1-7         utf8_1.2.1       \n[16] cli_2.3.1         jquerylib_0.1.3   htmltools_0.5.1.1\n[19] systemfonts_1.0.1 ellipsis_0.3.1    assertthat_0.2.1 \n[22] yaml_2.2.1        digest_0.6.27     lifecycle_1.0.0  \n[25] crayon_1.4.1      textshaping_0.3.3 sass_0.3.1       \n[28] vctrs_0.3.7       distill_1.2       glue_1.4.2       \n[31] evaluate_0.14     rmarkdown_2.7     stringi_1.5.3    \n[34] pillar_1.5.1      compiler_4.0.5    bslib_0.2.4      \n[37] jsonlite_1.7.2    pkgconfig_2.0.3  \n\n\n\n\n",
      "last_modified": "2021-04-07T16:22:20+00:00"
    },
    {
      "path": "2-Manipulacao_Dados.html",
      "title": "Manipulação de Dados",
      "description": "dplyr, readr, tidyr, stringr",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 7, 2021",
      "contents": "\n\nContents\nO que é Tidy Data?\nO pipe %>%\nComo ler dados com o {readr}\ncol_types – O argumento que eu mais uso em read_*()\n\nManipulação de dados com o {dplyr}\nSelecionar Variáveis – dplyr::select()\nManipular Variáveis – dplyr::mutate()\nAgrupar e Sumarizar Variáveis – dplyr::group_by() e dplyr::summarise()\nJoins com dplyr::join*\n\nMais transformações para formato Tidy Data com {tidyr}\nExtras\nConverter verbos {dplyr} em SQL com o {dbplyr}\nBig Data com {arrow}\n\nAmbiente\n\n\n\n\n\nFigure 1: Tidy Data\n\n\n\nO que é Tidy Data?\ncada variável uma coluna\ncada observação uma linha\ncada célula uma mensuração única\nO pipe %>%\nx %>% f(y) vira f(x, y)\nx %>% f(y) %>% f(z) vira f(f(x, y), z)\n\n\nlibrary(magrittr)\n\n# atalho é CTRL + SHIFT + M\n\nc(0:10, NA) %>%\n  mean(na.rm = TRUE) %>% \n  print() %>% \n  message() %>% \n  message()\n\n\n[1] 5\n\nComo ler dados com o {readr}\nVamos começar com o primeiro passo da análise de dados: a importação dos dados.\nPara isso o {tidyverse} possui um pacote chamado {readr}.\nread_csv(): CSV padrão americano\nread_csv2(): CSV padrão europeu/brasileiro\nread_tsv(): TSV\nread_delim(): Coringa\nNa pasta datasets/ temos diversos datasets interessantes:\nadult.csv\ncountries_of_the_world.csv\ncovid_19_data.csv: versão 147 de 27/02/2021.\nSe vocês quiserem ler arquivos .xlsx ou .xls usem o pacote {readxl}\ncol_types – O argumento que eu mais uso em read_*()\n\n\nlibrary(readr)\nadult <- read_csv(\"datasets/adult.csv\",\n                  col_types = \"_iffifffif\")\n\n\n\n\n\ncountries <- read_csv(\"datasets/countries_of_the_world.csv\", \n    col_types = cols(Population = col_integer(), \n        `Net migration` = col_double()), \n    locale = locale(decimal_mark = \",\"))\n\n\n\n\n\ncovid <- read_csv(\"datasets/covid_19_data.csv\", \n    col_types = cols(SNo = col_skip(), ObservationDate = col_date(format = \"%m/%d/%Y\")))\n\n\n\nManipulação de dados com o {dplyr}\n\n\n\nFigure 2: dplyr\n\n\n\nSelecionar Variáveis – dplyr::select()\n\n\nlibrary(dplyr)\nadult_clean <- adult %>% \n  select(age, workclass, education,\n         education_num = `educational-num`,\n         marital_status = `marital-status`,\n         race, gender,\n         hours_per_week = `hours-per-week`,\n         income)\n\n\n\n\nOBS: Tem a função rename_with do {dplyr} versão 1.0.\n\n\n\nadult %>% \n  rename_with(~gsub(\"-\", \"_\", .x))\n\n\n# A tibble: 48,842 x 9\n     age workclass    education  educational_num marital_status  race \n   <int> <fct>        <fct>                <int> <fct>           <fct>\n 1    25 Private      11th                     7 Never-married   Black\n 2    38 Private      HS-grad                  9 Married-civ-sp… White\n 3    28 Local-gov    Assoc-acdm              12 Married-civ-sp… White\n 4    44 Private      Some-coll…              10 Married-civ-sp… Black\n 5    18 ?            Some-coll…              10 Never-married   White\n 6    34 Private      10th                     6 Never-married   White\n 7    29 ?            HS-grad                  9 Never-married   Black\n 8    63 Self-emp-no… Prof-scho…              15 Married-civ-sp… White\n 9    24 Private      Some-coll…              10 Never-married   White\n10    55 Private      7th-8th                  4 Married-civ-sp… White\n# … with 48,832 more rows, and 3 more variables: gender <fct>,\n#   hours_per_week <int>, income <fct>\n\n\n\nadult %>% \n  rename_with(~gsub(\"-\", \"_\", .x)) %>% \n  select(where(is.factor)) %>% \n  select(-workclass) %>% \n  rename_all(~paste0(\"antigo_\", .x))\n\n\n# A tibble: 48,842 x 5\n   antigo_education antigo_marital_status antigo_race antigo_gender\n   <fct>            <fct>                 <fct>       <fct>        \n 1 11th             Never-married         Black       Male         \n 2 HS-grad          Married-civ-spouse    White       Male         \n 3 Assoc-acdm       Married-civ-spouse    White       Male         \n 4 Some-college     Married-civ-spouse    Black       Male         \n 5 Some-college     Never-married         White       Female       \n 6 10th             Never-married         White       Male         \n 7 HS-grad          Never-married         Black       Male         \n 8 Prof-school      Married-civ-spouse    White       Male         \n 9 Some-college     Never-married         White       Female       \n10 7th-8th          Married-civ-spouse    White       Male         \n# … with 48,832 more rows, and 1 more variable: antigo_income <fct>\n\n\nProfessor eu gosto de camelCase e agora?\n\nNão tema, tem o pacote {janitor}\n\n\nlibrary(janitor)\nadult %>% clean_names(case = \"lower_camel\")\n\n\n# A tibble: 48,842 x 9\n     age workclass education educationalNum maritalStatus race  gender\n   <int> <fct>     <fct>              <int> <fct>         <fct> <fct> \n 1    25 Private   11th                   7 Never-married Black Male  \n 2    38 Private   HS-grad                9 Married-civ-… White Male  \n 3    28 Local-gov Assoc-ac…             12 Married-civ-… White Male  \n 4    44 Private   Some-col…             10 Married-civ-… Black Male  \n 5    18 ?         Some-col…             10 Never-married White Female\n 6    34 Private   10th                   6 Never-married White Male  \n 7    29 ?         HS-grad                9 Never-married Black Male  \n 8    63 Self-emp… Prof-sch…             15 Married-civ-… White Male  \n 9    24 Private   Some-col…             10 Never-married White Female\n10    55 Private   7th-8th                4 Married-civ-… White Male  \n# … with 48,832 more rows, and 2 more variables: hoursPerWeek <int>,\n#   income <fct>\n\nOrdenar variáveis com dplyr::arrange()\n\n\nadult_clean %>% \n  arrange(-age, education_num) %>% \n  select(age, education_num)\n\n\n# A tibble: 48,842 x 2\n     age education_num\n   <int>         <int>\n 1    90             2\n 2    90             4\n 3    90             4\n 4    90             4\n 5    90             5\n 6    90             6\n 7    90             6\n 8    90             7\n 9    90             7\n10    90             9\n# … with 48,832 more rows\n\nFrequencias com dplyr::count()\n\nOBS: vamos ver muito essa função quando falarmos de group_by()\n\n\n\nadult_clean %>% \n  count(age, income, sort = TRUE)\n\n\n# A tibble: 142 x 3\n     age income     n\n   <int> <fct>  <int>\n 1    23 <=50K   1307\n 2    24 <=50K   1162\n 3    22 <=50K   1161\n 4    25 <=50K   1119\n 5    27 <=50K   1117\n 6    20 <=50K   1112\n 7    28 <=50K   1101\n 8    21 <=50K   1090\n 9    26 <=50K   1068\n10    19 <=50K   1050\n# … with 132 more rows\n\nManipular Variáveis – dplyr::mutate()\n\nOdeio potência de 10\n\nuse options(scipen = 999, digits = 2)\n\n\noptions(scipen = 999, digits = 2)\ncountries <- countries %>% clean_names()\n\ncountries %>% \n  mutate(\n    log_pop = log(population),\n    area_sq_km = area_sq_mi * 2.5899985,\n    pop_density_per_sq_km = population / area_sq_km)\n\n\n# A tibble: 227 x 23\n   country      region        population area_sq_mi pop_density_per_s…\n   <chr>        <chr>              <int>      <dbl>              <dbl>\n 1 Afghanistan  ASIA (EX. NE…   31056997     647500               48  \n 2 Albania      EASTERN EURO…    3581655      28748              125. \n 3 Algeria      NORTHERN AFR…   32930091    2381740               13.8\n 4 American Sa… OCEANIA            57794        199              290. \n 5 Andorra      WESTERN EURO…      71201        468              152. \n 6 Angola       SUB-SAHARAN …   12127071    1246700                9.7\n 7 Anguilla     LATIN AMER. …      13477        102              132. \n 8 Antigua & B… LATIN AMER. …      69108        443              156  \n 9 Argentina    LATIN AMER. …   39921833    2766890               14.4\n10 Armenia      C.W. OF IND.…    2976372      29800               99.9\n# … with 217 more rows, and 18 more variables:\n#   coastline_coast_area_ratio <dbl>, net_migration <dbl>,\n#   infant_mortality_per_1000_births <dbl>, gdp_per_capita <dbl>,\n#   literacy_percent <dbl>, phones_per_1000 <dbl>,\n#   arable_percent <dbl>, crops_percent <dbl>, other_percent <dbl>,\n#   climate <dbl>, birthrate <dbl>, deathrate <dbl>,\n#   agriculture <dbl>, industry <dbl>, service <dbl>, log_pop <dbl>,\n#   area_sq_km <dbl>, pop_density_per_sq_km <dbl>\n\nO mutate ele altera variáveis in-place ou adiciona novas variáveis preservando as existentes. Mas temos também o transmute adiciona novas variáveis e dropa todas as demais.\n\n\ncountries %>% \n  transmute(\n    log_pop = log(population),\n    area_sq_km = area_sq_mi * 2.5899985,\n    pop_density_per_sq_km = population / area_sq_km)\n\n\n# A tibble: 227 x 3\n   log_pop area_sq_km pop_density_per_sq_km\n     <dbl>      <dbl>                 <dbl>\n 1   17.3    1677024.                 18.5 \n 2   15.1      74457.                 48.1 \n 3   17.3    6168703.                  5.34\n 4   11.0        515.                112.  \n 5   11.2       1212.                 58.7 \n 6   16.3    3228951.                  3.76\n 7    9.51       264.                 51.0 \n 8   11.1       1147.                 60.2 \n 9   17.5    7166241.                  5.57\n10   14.9      77182.                 38.6 \n# … with 217 more rows\n\nQuase todos os verbos (como vocês viram lá em cima) do {dplyr} tem os sufixos _if, _all e _at. Por exemplo:\n\n\ncovid %>% \n  mutate_if(is.character, as.factor)\n\n\n# A tibble: 236,017 x 7\n   ObservationDate `Province/State` `Country/Region` `Last Update`  \n   <date>          <fct>            <fct>            <fct>          \n 1 2020-01-22      Anhui            Mainland China   1/22/2020 17:00\n 2 2020-01-22      Beijing          Mainland China   1/22/2020 17:00\n 3 2020-01-22      Chongqing        Mainland China   1/22/2020 17:00\n 4 2020-01-22      Fujian           Mainland China   1/22/2020 17:00\n 5 2020-01-22      Gansu            Mainland China   1/22/2020 17:00\n 6 2020-01-22      Guangdong        Mainland China   1/22/2020 17:00\n 7 2020-01-22      Guangxi          Mainland China   1/22/2020 17:00\n 8 2020-01-22      Guizhou          Mainland China   1/22/2020 17:00\n 9 2020-01-22      Hainan           Mainland China   1/22/2020 17:00\n10 2020-01-22      Hebei            Mainland China   1/22/2020 17:00\n# … with 236,007 more rows, and 3 more variables: Confirmed <dbl>,\n#   Deaths <dbl>, Recovered <dbl>\n\ndplyr::if_else e dplyr::case_when\nUsamos o if_else quando queremos fazer um teste booleano e gerar um valor caso o teste seja verdadeiro e outro valor caso o teste seja falso. Basicamente um if ... else ...:\n\n\nadult_clean %>% \n  mutate(\n    race_black = if_else(race == \"Black\", 1L, 0L)\n  ) %>% \n  select(starts_with(\"race\"))\n\n\n# A tibble: 48,842 x 2\n   race  race_black\n   <fct>      <int>\n 1 Black          1\n 2 White          0\n 3 White          0\n 4 Black          1\n 5 White          0\n 6 White          0\n 7 Black          1\n 8 White          0\n 9 White          0\n10 White          0\n# … with 48,832 more rows\n\nTemos algo um pouco mais flexível, poderoso; porém verboso. Esse é o dplyr::case_when:\n\n\nadult_cat <- adult_clean %>% \n  mutate(\n    marital_status_cat = case_when(\n      marital_status == \"Never-married\" ~ 1L,\n      marital_status == \"Married-civ-spouse\" ~ 2L,\n      marital_status == \"Married-spouse-absent\" ~ 3L,\n      marital_status == \"Married-AF-spouse \" ~ 4L,\n      marital_status == \"Separated\" ~ 5L,\n      marital_status == \"Divorced\" ~ 6L,\n      marital_status == \"Widowed\" ~ 7L,\n      TRUE ~ NA_integer_\n    ),\n    marital_age_group = case_when(\n      marital_status_cat == 1 & age >=30 ~ \"solteirx_convictx\",\n      marital_status_cat == 1 & age <=30 ~ \"solteirx_jovem\",\n      marital_status_cat > 1 & marital_status_cat <= 4 & age >=30 ~ \"adultos_casados\",\n      marital_status_cat > 1 & marital_status_cat <= 4 & age <=30 ~ \"jovens_casados\",\n      TRUE ~ \"divorciados, separados etc\"\n    )\n  ) \n  adult_cat %>% \n    select(starts_with(\"marital\")) %>%\n    count(marital_age_group, sort = TRUE)\n\n\n# A tibble: 5 x 2\n  marital_age_group              n\n  <chr>                      <int>\n1 adultos_casados            20195\n2 solteirx_jovem             10798\n3 divorciados, separados etc  9718\n4 solteirx_convictx           5319\n5 jovens_casados              2812\n\nAgrupar e Sumarizar Variáveis – dplyr::group_by() e dplyr::summarise()\nAgrupamos dados com o dplyr::group_by() e depois usamos o dplyr::summarise() (também existe na versão inglês americano como dplyr::summarize()`) para computar valores dos grupos. Este tipo de análise é chamada comumente de split-apply-combine.\n\n\nadult_cat %>% \n  group_by(marital_age_group) %>% \n  summarise(\n    n = n(),\n    n_prop = n / nrow(.)) %>% \n  arrange(-n)\n\n\n# A tibble: 5 x 3\n  marital_age_group              n n_prop\n  <chr>                      <int>  <dbl>\n1 adultos_casados            20195 0.413 \n2 solteirx_jovem             10798 0.221 \n3 divorciados, separados etc  9718 0.199 \n4 solteirx_convictx           5319 0.109 \n5 jovens_casados              2812 0.0576\n\n\n\ncovid %>% \n  janitor::clean_names() %>% \n  group_by(country_region) %>% \n  summarise(\n    n = n(),\n    media_confirmados = mean(confirmed),\n    mediana_confirmados = median(confirmed),\n    media_mortos = mean(deaths),\n    mediana_mortos = median(deaths)\n  ) %>% \n  arrange(-mediana_mortos)\n\n\n# A tibble: 226 x 6\n   country_region     n media_confirmad… mediana_confirm… media_mortos\n   <chr>          <int>            <dbl>            <dbl>        <dbl>\n 1 Iran             375          533357.          361150        25526.\n 2 South Africa     360          564541.          627650        14975.\n 3 Argentina        362          713468.          413080.       18151.\n 4 Indonesia        363          334202.          172053        10592.\n 5 Iraq             371          272190.          215784         6416.\n 6 Ecuador          364          116916.          111680         8028.\n 7 Turkey           354          717519.          275749         9998.\n 8 Bolivia          354           98196.          119180.        5184.\n 9 Egypt            380           80259.           97192.        4399.\n10 Bangladesh       357          279329.          317528         4023.\n# … with 216 more rows, and 1 more variable: mediana_mortos <dbl>\n\nEu posso agrupar por vários grupos por exemplo:\n\n\nlibrary(tidyr)\ncovid %>% \n  janitor::clean_names() %>% \n  group_by(country_region, province_state) %>% \n  drop_na() %>% \n  count(wt = deaths, sort = TRUE)\n\n\n# A tibble: 760 x 3\n# Groups:   country_region, province_state [760]\n   country_region province_state        n\n   <chr>          <chr>             <dbl>\n 1 UK             England        13897698\n 2 US             New York       10888511\n 3 Brazil         Sao Paulo       9651617\n 4 India          Maharashtra     9117030\n 5 Italy          Lombardia       5743485\n 6 US             California      5358608\n 7 Brazil         Rio de Janeiro  5335936\n 8 US             Texas           5072817\n 9 US             New Jersey      5054435\n10 US             Florida         4153905\n# … with 750 more rows\n\nLembra que todos os verbos do {dplyr} tem o sufixo _all, _if e _at?\n\n\ncovid %>% \n  summarise_if(is.numeric, median)\n\n\n# A tibble: 1 x 3\n  Confirmed Deaths Recovered\n      <dbl>  <dbl>     <dbl>\n1      6695    127      1224\n\nNão sei o futuro das coisas _if, _at e _all, pois o lifecycle está em superseded. Então se vocês quiserem um código robusto ao tempo usem o across:\n\n\ncovid %>% \n  summarise(across(where(is.numeric), ~median(.x, na.rm = TRUE)))\n\n\n# A tibble: 1 x 3\n  Confirmed Deaths Recovered\n      <dbl>  <dbl>     <dbl>\n1      6695    127      1224\n\n\nQual a diferença de grouped_df e tibble?\n\nSe você estiver no mundo do {tidyverse} nenhuma, mas se você for dar um pipe %>% de um grouped_df em algo que não é do {tidyverse} e que somente aceita tibbles e data.frames você vai receber um erro. Nesses casos antes de “pipar” %>% você faz um ungroup():\n\n\nadult_clean %>% \n  group_by(gender) %>% \n  class() %>% \n  print\n\n\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nadult_clean %>% \n  group_by(gender) %>% \n  ungroup() %>% # <----- \"desgrupando\"\n  class() %>% \n  print\n\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\ncovid <- covid %>% janitor::clean_names()\ncountries <- countries %>% janitor::clean_names()\n\n\n\nJoins com dplyr::join*\nVamos para a cereja do bolo que é os famosos joins. {dplyr} tem os seguintes joins:\ninner_join(): inclui todas as observações de x e y.\nleft_join(): inclui todas as observações de x.\nright_join(): inclui todas as observações de y.\nfull_join(): inclui todas as observações de x ou y.\n\nOBS: participação especial do {stringr}\n\n\n\nlibrary(stringr)\n# antes de fazer o join vamos ver se vai dar certo\n227 - sum(countries$country %in% covid$country_region)\n\n\n[1] 42\n\n\n\ncovid %>%\n  count(country_region, wt = confirmed, sort = TRUE) %>% \n  filter(str_detect(country_region, \"China\"))\n\n\n# A tibble: 1 x 2\n  country_region        n\n  <chr>             <dbl>\n1 Mainland China 32591323\n\n\n\ncountries %>%\n  filter(str_detect(country, \"China\"))\n\n\n# A tibble: 1 x 20\n  country region             population area_sq_mi pop_density_per_sq…\n  <chr>   <chr>                   <int>      <dbl>               <dbl>\n1 China   ASIA (EX. NEAR EA… 1313973713    9596960                137.\n# … with 15 more variables: coastline_coast_area_ratio <dbl>,\n#   net_migration <dbl>, infant_mortality_per_1000_births <dbl>,\n#   gdp_per_capita <dbl>, literacy_percent <dbl>,\n#   phones_per_1000 <dbl>, arable_percent <dbl>, crops_percent <dbl>,\n#   other_percent <dbl>, climate <dbl>, birthrate <dbl>,\n#   deathrate <dbl>, agriculture <dbl>, industry <dbl>, service <dbl>\n\n\n\nlibrary(ggplot2)\ncovid %>% \n  mutate(\n    country_region = str_replace(country_region, \"Mainland China\", \"China\")\n  ) %>% \n  filter(observation_date == max(observation_date)) %>% \n  right_join(countries,\n             by = c(\"country_region\" = \"country\")) %>% \n  mutate(deaths_per_capita = deaths / population) %>% \n  ggplot(aes(x = gdp_per_capita, y = deaths_per_capita)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nMais transformações para formato Tidy Data com {tidyr}\nO tidyr tem o famoso drop_na(). Então se vocês forem usar o drop_na() junto com o dplyr não esqueçam do library(tidyr).\n\nOBS: vocês podem importar TODO o {tidyverse} de uma vez só com o library(tidyverse)\n\nEm especial temos as funções pivot_longer() e pivot_wider():\nDataset tidyr::relig_income\nDataset tidyr::billboard\nDataset tidyr::fish_encounters\n\n\nlibrary(tidyr)\nrelig_income %>% \n  pivot_longer(!religion,\n               names_to = \"income\",\n               values_to = \"count\") %>% \n  mutate(across(where(is.character), as.factor)) %>% \n  filter(!str_detect(income, \"Don't know\")) %>% \n  count(religion, income, wt = count, sort = TRUE)\n\n\n# A tibble: 162 x 3\n   religion         income       n\n   <fct>            <fct>    <dbl>\n 1 Evangelical Prot $50-75k   1486\n 2 Catholic         $50-75k   1116\n 3 Mainline Prot    $50-75k   1107\n 4 Evangelical Prot $20-30k   1064\n 5 Evangelical Prot $30-40k    982\n 6 Catholic         $75-100k   949\n 7 Evangelical Prot $75-100k   949\n 8 Mainline Prot    $75-100k   939\n 9 Evangelical Prot $40-50k    881\n10 Evangelical Prot $10-20k    869\n# … with 152 more rows\n\n\n\nbillboard %>% \n  pivot_longer(\n    cols = starts_with(\"wk\"),\n    names_to = \"week\",\n    values_to = \"rank\",\n    values_drop_na = TRUE\n  ) %>% \n  group_by(artist) %>% \n  summarise(\n    n = n(),\n    median_rank = median(rank)) %>% \n  arrange(-n, median_rank)\n\n\n# A tibble: 228 x 3\n   artist                  n median_rank\n   <chr>               <int>       <dbl>\n 1 Creed                 104        28.5\n 2 Lonestar               95        38  \n 3 Destiny's Child        92        13  \n 4 N'Sync                 74        12  \n 5 Sisqo                  74        25.5\n 6 3 Doors Down           73        42  \n 7 Jay-Z                  73        45  \n 8 Aguilera, Christina    67        17  \n 9 Hill, Faith            67        28  \n10 Houston, Whitney       67        54  \n# … with 218 more rows\n\n\n\nfish_encounters %>%\n  pivot_wider(\n    names_from = station,\n    values_from = seen,\n    values_fill = 0\n  ) %>% \n  pivot_longer(!fish, names_to = \"station\", values_to = \"seen\")\n\n\n# A tibble: 209 x 3\n   fish  station  seen\n   <fct> <chr>   <int>\n 1 4842  Release     1\n 2 4842  I80_1       1\n 3 4842  Lisbon      1\n 4 4842  Rstr        1\n 5 4842  Base_TD     1\n 6 4842  BCE         1\n 7 4842  BCW         1\n 8 4842  BCE2        1\n 9 4842  BCW2        1\n10 4842  MAE         1\n# … with 199 more rows\n\nAlém do unnest_wider() e unnest_longer():\nDataset repurrrsive::got_chars\n\n\nlibrary(repurrrsive)\nchars <- tibble(char = got_chars)\nchars %>%\n  unnest_wider(char) %>% \n  select(name, books, tvSeries) %>% \n  pivot_longer(!name, names_to = \"media\") %>% \n  unnest_longer(value) %>% \n  filter(media == \"tvSeries\") %>% \n  extract(value, \"season\", \"(\\\\d{1})\", convert = TRUE)\n\n\n# A tibble: 102 x 3\n   name             media    season\n   <chr>            <chr>     <int>\n 1 Theon Greyjoy    tvSeries      1\n 2 Theon Greyjoy    tvSeries      2\n 3 Theon Greyjoy    tvSeries      3\n 4 Theon Greyjoy    tvSeries      4\n 5 Theon Greyjoy    tvSeries      5\n 6 Theon Greyjoy    tvSeries      6\n 7 Tyrion Lannister tvSeries      1\n 8 Tyrion Lannister tvSeries      2\n 9 Tyrion Lannister tvSeries      3\n10 Tyrion Lannister tvSeries      4\n# … with 92 more rows\n\nUma outra maneira\n\n\nchars %>%\n  unnest_wider(char) %>% \n  select(name, books, tvSeries) %>% \n  pivot_longer(!name, names_to = \"media\") %>% \n  unnest_longer(value) %>% \n  filter(media == \"tvSeries\") %>% \n  separate(value, into = c(NA, \"season\"), sep = \" \", fill = \"right\")\n\n\n# A tibble: 102 x 3\n   name             media    season\n   <chr>            <chr>    <chr> \n 1 Theon Greyjoy    tvSeries 1     \n 2 Theon Greyjoy    tvSeries 2     \n 3 Theon Greyjoy    tvSeries 3     \n 4 Theon Greyjoy    tvSeries 4     \n 5 Theon Greyjoy    tvSeries 5     \n 6 Theon Greyjoy    tvSeries 6     \n 7 Tyrion Lannister tvSeries 1     \n 8 Tyrion Lannister tvSeries 2     \n 9 Tyrion Lannister tvSeries 3     \n10 Tyrion Lannister tvSeries 4     \n# … with 92 more rows\n\nExtras\nConverter verbos {dplyr} em SQL com o {dbplyr}\n\n\nlibrary(dplyr, warn.conflicts = FALSE)\n\ncon <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")\ncopy_to(con, mtcars)\n\nmtcars2 <- tbl(con, \"mtcars\")\n\n\n\nPosso muito bem converter verbos {dplyr} para SQL (para todos os amantes de SQL)\n\n\nsummary <- mtcars2 %>% \n  group_by(cyl) %>% \n  summarise(mpg = mean(mpg, na.rm = TRUE)) %>% \n  arrange(-mpg)\n\nsummary %>% show_query()\n\n\n<SQL>\nSELECT `cyl`, AVG(`mpg`) AS `mpg`\nFROM `mtcars`\nGROUP BY `cyl`\nORDER BY -`mpg`\n\nsummary %>% collect()\n\n\n# A tibble: 3 x 2\n    cyl   mpg\n  <dbl> <dbl>\n1     4  26.7\n2     6  19.7\n3     8  15.1\n\nBig Data com {arrow}\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3\nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C          \n [3] LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8    \n [5] LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C             \n [9] LC_ADDRESS=C           LC_TELEPHONE=C        \n[11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] repurrrsive_1.0.0 ggplot2_3.3.3     stringr_1.4.0    \n[4] tidyr_1.1.3       janitor_2.1.0     dplyr_1.0.5      \n[7] readr_1.4.0       magrittr_2.0.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.0  xfun_0.22         bslib_0.2.4      \n [4] purrr_0.3.4       splines_4.0.3     lattice_0.20-41  \n [7] snakecase_0.11.0  colorspace_2.0-0  vctrs_0.3.7      \n[10] generics_0.1.0    htmltools_0.5.1.1 yaml_2.2.1       \n[13] mgcv_1.8-33       blob_1.2.1        utf8_1.2.1       \n[16] rlang_0.4.10      jquerylib_0.1.3   pillar_1.5.1     \n[19] glue_1.4.2        withr_2.4.1       DBI_1.1.1        \n[22] dbplyr_2.1.0      bit64_4.0.5       lifecycle_1.0.0  \n[25] munsell_0.5.0     gtable_0.3.0      memoise_2.0.0    \n[28] evaluate_0.14     labeling_0.4.2    knitr_1.31       \n[31] fastmap_1.1.0     fansi_0.4.2       highr_0.8        \n[34] Rcpp_1.0.6        scales_1.1.1      cachem_1.0.4     \n[37] jsonlite_1.7.2    bit_4.0.4         farver_2.1.0     \n[40] distill_1.2       hms_1.0.0         png_0.1-7        \n[43] digest_0.6.27     stringi_1.5.3     grid_4.0.3       \n[46] cli_2.4.0         tools_4.0.3       sass_0.3.1       \n[49] RSQLite_2.2.5     tibble_3.1.0      crayon_1.4.1     \n[52] pkgconfig_2.0.3   downlit_0.2.1     ellipsis_0.3.1   \n[55] Matrix_1.2-18     lubridate_1.7.10  assertthat_0.2.1 \n[58] rmarkdown_2.7     rstudioapi_0.13   R6_2.5.0         \n[61] nlme_3.1-149      compiler_4.0.3   \n\n\n\n\n",
      "last_modified": "2021-04-10T01:08:28+00:00"
    },
    {
      "path": "3-Visualizacao_Dados.html",
      "title": "Visualização de Dados",
      "description": "ggplot2, scales, patchwork, e mais",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 12, 2021",
      "contents": "\n\nContents\nComo usar?\nGeom\nEstéticas com aes()\nAtributos dentro e fora do aes()\n\nRótulos com labs()\nFacetação com facet_wrap()\nCustomização de Temas com theme()\nEscalas com o scale_*_*()\nMais escalas com o {scales}\n“Como é que salva?” ggsave()\nCompor múltiplos gráficos com {patchwork}\nFree Samples\nAmbiente\n\n\n\n\n\nFigure 1: Crie sua Obra-Prima!\n\n\n\n{ggplot2} é um sistema para a criação declarativa de gráficos, baseado na Gramática dos Gráficos–um esquema geral para visualização de dados que divide os gráficos em componentes semânticos, como escalas e camadas. Você fornece os dados, diz ao {ggplot2} como mapear as variáveis para as estéticas, quais primitivos gráficos usar e ele cuida dos detalhes.\nUm livro muito bom sobre visualização de dados é o “Fundamentals of Data Visualizations” de Claus Wilke (Figura 2). Um segredinho, ele foi todo feito em Rmarkdown e ggplot2 #ficaadica.\n\n\n\nFigure 2: Fundamentals of Data Visualization\n\n\n\nComo usar?\nCada gráfico {ggplot2} tem três componentes principais:\ndados (data),\nUm conjunto de mapeamentos estéticos (aesthetics) aes() entre variáveis nos dados e propriedades visuais, e\nPelo menos uma camada (layer) que descreve como renderizar cada observação. As camadas geralmente são criadas com uma função geom_*.\n\n\nlibrary(ggplot2) # `require(ggplot2)` também serve 99.99% usam `library()`\nlibrary(dplyr)\nmpg %>% # igual a isso `ggplot(data = mpg)`\n  ggplot()\n\n\n\n\n\n\nmpg %>% \n  ggplot(aes(hwy, cty))\n\n\n\n\n\n\nmpg %>% \n  ggplot(aes(hwy, cty)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\nOBS: Porque + e não o pipe %>%? Lembra que eu falei que {ggplot2} veio antes do {tidyverse} e antes do Hadley trabalhar totalmente com opensource na RStudio? Então os geom_*() vieram antes do pipe %>%. Por isso a API adiciona camadas. Então usamos o +.\n\n\nPergunta: Quero interatividade?! E agora? Resposta: Não tema! Use o {plotly} e seja feliz!\n\n\n\nlibrary(plotly)\np <- mpg %>% \n  ggplot(aes(hwy, cty)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\nggplotly(p)\n\n\n\n{\"x\":{\"data\":[{\"x\":[29,29,31,30,26,26,27,26,25,28,27,25,25,25,25,24,25,23,20,15,20,17,17,26,23,26,25,24,19,14,15,17,27,30,26,29,26,24,24,22,22,24,24,17,22,21,23,23,19,18,17,17,19,19,12,17,15,17,17,12,17,16,18,15,16,12,17,17,16,12,15,16,17,15,17,17,18,17,19,17,19,19,17,17,17,16,16,17,15,17,26,25,26,24,21,22,23,22,20,33,32,32,29,32,34,36,36,29,26,27,30,31,26,26,28,26,29,28,27,24,24,24,22,19,20,17,12,19,18,14,15,18,18,15,17,16,18,17,19,19,17,29,27,31,32,27,26,26,25,25,17,17,20,18,26,26,27,28,25,25,24,27,25,26,23,26,26,26,26,25,27,25,27,20,20,19,17,20,17,29,27,31,31,26,26,28,27,29,31,31,26,26,27,30,33,35,37,35,15,18,20,20,22,17,19,18,20,29,26,29,29,24,44,29,26,29,29,29,29,23,24,44,41,29,26,28,29,29,29,28,29,26,26,26],\"y\":[18,21,20,21,16,18,18,18,16,20,19,15,17,17,15,15,17,16,14,11,14,13,12,16,15,16,15,15,14,11,11,14,19,22,18,18,17,18,17,16,16,17,17,11,15,15,16,16,15,14,13,14,14,14,9,11,11,13,13,9,13,11,13,11,12,9,13,13,12,9,11,11,13,11,11,11,12,14,15,14,13,13,13,14,14,13,13,13,11,13,18,18,17,16,15,15,15,15,14,28,24,25,23,24,26,25,24,21,18,18,21,21,18,18,19,19,19,20,20,17,16,17,17,15,15,14,9,14,13,11,11,12,12,11,11,11,12,14,13,13,13,21,19,23,23,19,19,18,19,19,14,15,14,12,18,16,17,18,16,18,18,20,19,20,18,21,19,19,19,20,20,19,20,15,16,15,15,16,14,21,21,21,21,18,18,19,21,21,21,22,18,18,18,24,24,26,28,26,11,13,15,16,17,15,15,15,16,21,19,21,22,17,33,21,19,22,21,21,21,16,17,35,29,21,19,20,20,21,18,19,21,16,18,17],\"text\":[\"hwy: 29<br />cty: 18\",\"hwy: 29<br />cty: 21\",\"hwy: 31<br />cty: 20\",\"hwy: 30<br />cty: 21\",\"hwy: 26<br />cty: 16\",\"hwy: 26<br />cty: 18\",\"hwy: 27<br />cty: 18\",\"hwy: 26<br />cty: 18\",\"hwy: 25<br />cty: 16\",\"hwy: 28<br />cty: 20\",\"hwy: 27<br />cty: 19\",\"hwy: 25<br />cty: 15\",\"hwy: 25<br />cty: 17\",\"hwy: 25<br />cty: 17\",\"hwy: 25<br />cty: 15\",\"hwy: 24<br />cty: 15\",\"hwy: 25<br />cty: 17\",\"hwy: 23<br />cty: 16\",\"hwy: 20<br />cty: 14\",\"hwy: 15<br />cty: 11\",\"hwy: 20<br />cty: 14\",\"hwy: 17<br />cty: 13\",\"hwy: 17<br />cty: 12\",\"hwy: 26<br />cty: 16\",\"hwy: 23<br />cty: 15\",\"hwy: 26<br />cty: 16\",\"hwy: 25<br />cty: 15\",\"hwy: 24<br />cty: 15\",\"hwy: 19<br />cty: 14\",\"hwy: 14<br />cty: 11\",\"hwy: 15<br />cty: 11\",\"hwy: 17<br />cty: 14\",\"hwy: 27<br />cty: 19\",\"hwy: 30<br />cty: 22\",\"hwy: 26<br />cty: 18\",\"hwy: 29<br />cty: 18\",\"hwy: 26<br />cty: 17\",\"hwy: 24<br />cty: 18\",\"hwy: 24<br />cty: 17\",\"hwy: 22<br />cty: 16\",\"hwy: 22<br />cty: 16\",\"hwy: 24<br />cty: 17\",\"hwy: 24<br />cty: 17\",\"hwy: 17<br />cty: 11\",\"hwy: 22<br />cty: 15\",\"hwy: 21<br />cty: 15\",\"hwy: 23<br />cty: 16\",\"hwy: 23<br />cty: 16\",\"hwy: 19<br />cty: 15\",\"hwy: 18<br />cty: 14\",\"hwy: 17<br />cty: 13\",\"hwy: 17<br />cty: 14\",\"hwy: 19<br />cty: 14\",\"hwy: 19<br />cty: 14\",\"hwy: 12<br />cty:  9\",\"hwy: 17<br />cty: 11\",\"hwy: 15<br />cty: 11\",\"hwy: 17<br />cty: 13\",\"hwy: 17<br />cty: 13\",\"hwy: 12<br />cty:  9\",\"hwy: 17<br />cty: 13\",\"hwy: 16<br />cty: 11\",\"hwy: 18<br />cty: 13\",\"hwy: 15<br />cty: 11\",\"hwy: 16<br />cty: 12\",\"hwy: 12<br />cty:  9\",\"hwy: 17<br />cty: 13\",\"hwy: 17<br />cty: 13\",\"hwy: 16<br />cty: 12\",\"hwy: 12<br />cty:  9\",\"hwy: 15<br />cty: 11\",\"hwy: 16<br />cty: 11\",\"hwy: 17<br />cty: 13\",\"hwy: 15<br />cty: 11\",\"hwy: 17<br />cty: 11\",\"hwy: 17<br />cty: 11\",\"hwy: 18<br />cty: 12\",\"hwy: 17<br />cty: 14\",\"hwy: 19<br />cty: 15\",\"hwy: 17<br />cty: 14\",\"hwy: 19<br />cty: 13\",\"hwy: 19<br />cty: 13\",\"hwy: 17<br />cty: 13\",\"hwy: 17<br />cty: 14\",\"hwy: 17<br />cty: 14\",\"hwy: 16<br />cty: 13\",\"hwy: 16<br />cty: 13\",\"hwy: 17<br />cty: 13\",\"hwy: 15<br />cty: 11\",\"hwy: 17<br />cty: 13\",\"hwy: 26<br />cty: 18\",\"hwy: 25<br />cty: 18\",\"hwy: 26<br />cty: 17\",\"hwy: 24<br />cty: 16\",\"hwy: 21<br />cty: 15\",\"hwy: 22<br />cty: 15\",\"hwy: 23<br />cty: 15\",\"hwy: 22<br />cty: 15\",\"hwy: 20<br />cty: 14\",\"hwy: 33<br />cty: 28\",\"hwy: 32<br />cty: 24\",\"hwy: 32<br />cty: 25\",\"hwy: 29<br />cty: 23\",\"hwy: 32<br />cty: 24\",\"hwy: 34<br />cty: 26\",\"hwy: 36<br />cty: 25\",\"hwy: 36<br />cty: 24\",\"hwy: 29<br />cty: 21\",\"hwy: 26<br />cty: 18\",\"hwy: 27<br />cty: 18\",\"hwy: 30<br />cty: 21\",\"hwy: 31<br />cty: 21\",\"hwy: 26<br />cty: 18\",\"hwy: 26<br />cty: 18\",\"hwy: 28<br />cty: 19\",\"hwy: 26<br />cty: 19\",\"hwy: 29<br />cty: 19\",\"hwy: 28<br />cty: 20\",\"hwy: 27<br />cty: 20\",\"hwy: 24<br />cty: 17\",\"hwy: 24<br />cty: 16\",\"hwy: 24<br />cty: 17\",\"hwy: 22<br />cty: 17\",\"hwy: 19<br />cty: 15\",\"hwy: 20<br />cty: 15\",\"hwy: 17<br />cty: 14\",\"hwy: 12<br />cty:  9\",\"hwy: 19<br />cty: 14\",\"hwy: 18<br />cty: 13\",\"hwy: 14<br />cty: 11\",\"hwy: 15<br />cty: 11\",\"hwy: 18<br />cty: 12\",\"hwy: 18<br />cty: 12\",\"hwy: 15<br />cty: 11\",\"hwy: 17<br />cty: 11\",\"hwy: 16<br />cty: 11\",\"hwy: 18<br />cty: 12\",\"hwy: 17<br />cty: 14\",\"hwy: 19<br />cty: 13\",\"hwy: 19<br />cty: 13\",\"hwy: 17<br />cty: 13\",\"hwy: 29<br />cty: 21\",\"hwy: 27<br />cty: 19\",\"hwy: 31<br />cty: 23\",\"hwy: 32<br />cty: 23\",\"hwy: 27<br />cty: 19\",\"hwy: 26<br />cty: 19\",\"hwy: 26<br />cty: 18\",\"hwy: 25<br />cty: 19\",\"hwy: 25<br />cty: 19\",\"hwy: 17<br />cty: 14\",\"hwy: 17<br />cty: 15\",\"hwy: 20<br />cty: 14\",\"hwy: 18<br />cty: 12\",\"hwy: 26<br />cty: 18\",\"hwy: 26<br />cty: 16\",\"hwy: 27<br />cty: 17\",\"hwy: 28<br />cty: 18\",\"hwy: 25<br />cty: 16\",\"hwy: 25<br />cty: 18\",\"hwy: 24<br />cty: 18\",\"hwy: 27<br />cty: 20\",\"hwy: 25<br />cty: 19\",\"hwy: 26<br />cty: 20\",\"hwy: 23<br />cty: 18\",\"hwy: 26<br />cty: 21\",\"hwy: 26<br />cty: 19\",\"hwy: 26<br />cty: 19\",\"hwy: 26<br />cty: 19\",\"hwy: 25<br />cty: 20\",\"hwy: 27<br />cty: 20\",\"hwy: 25<br />cty: 19\",\"hwy: 27<br />cty: 20\",\"hwy: 20<br />cty: 15\",\"hwy: 20<br />cty: 16\",\"hwy: 19<br />cty: 15\",\"hwy: 17<br />cty: 15\",\"hwy: 20<br />cty: 16\",\"hwy: 17<br />cty: 14\",\"hwy: 29<br />cty: 21\",\"hwy: 27<br />cty: 21\",\"hwy: 31<br />cty: 21\",\"hwy: 31<br />cty: 21\",\"hwy: 26<br />cty: 18\",\"hwy: 26<br />cty: 18\",\"hwy: 28<br />cty: 19\",\"hwy: 27<br />cty: 21\",\"hwy: 29<br />cty: 21\",\"hwy: 31<br />cty: 21\",\"hwy: 31<br />cty: 22\",\"hwy: 26<br />cty: 18\",\"hwy: 26<br />cty: 18\",\"hwy: 27<br />cty: 18\",\"hwy: 30<br />cty: 24\",\"hwy: 33<br />cty: 24\",\"hwy: 35<br />cty: 26\",\"hwy: 37<br />cty: 28\",\"hwy: 35<br />cty: 26\",\"hwy: 15<br />cty: 11\",\"hwy: 18<br />cty: 13\",\"hwy: 20<br />cty: 15\",\"hwy: 20<br />cty: 16\",\"hwy: 22<br />cty: 17\",\"hwy: 17<br />cty: 15\",\"hwy: 19<br />cty: 15\",\"hwy: 18<br />cty: 15\",\"hwy: 20<br />cty: 16\",\"hwy: 29<br />cty: 21\",\"hwy: 26<br />cty: 19\",\"hwy: 29<br />cty: 21\",\"hwy: 29<br />cty: 22\",\"hwy: 24<br />cty: 17\",\"hwy: 44<br />cty: 33\",\"hwy: 29<br />cty: 21\",\"hwy: 26<br />cty: 19\",\"hwy: 29<br />cty: 22\",\"hwy: 29<br />cty: 21\",\"hwy: 29<br />cty: 21\",\"hwy: 29<br />cty: 21\",\"hwy: 23<br />cty: 16\",\"hwy: 24<br />cty: 17\",\"hwy: 44<br />cty: 35\",\"hwy: 41<br />cty: 29\",\"hwy: 29<br />cty: 21\",\"hwy: 26<br />cty: 19\",\"hwy: 28<br />cty: 20\",\"hwy: 29<br />cty: 20\",\"hwy: 29<br />cty: 21\",\"hwy: 29<br />cty: 18\",\"hwy: 28<br />cty: 19\",\"hwy: 29<br />cty: 21\",\"hwy: 26<br />cty: 16\",\"hwy: 26<br />cty: 18\",\"hwy: 26<br />cty: 17\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":5.66929133858268,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[12,12.4050632911392,12.8101265822785,13.2151898734177,13.620253164557,14.0253164556962,14.4303797468354,14.8354430379747,15.2405063291139,15.6455696202532,16.0506329113924,16.4556962025316,16.8607594936709,17.2658227848101,17.6708860759494,18.0759493670886,18.4810126582278,18.8860759493671,19.2911392405063,19.6962025316456,20.1012658227848,20.506329113924,20.9113924050633,21.3164556962025,21.7215189873418,22.126582278481,22.5316455696203,22.9367088607595,23.3417721518987,23.746835443038,24.1518987341772,24.5569620253165,24.9620253164557,25.3670886075949,25.7721518987342,26.1772151898734,26.5822784810127,26.9873417721519,27.3924050632911,27.7974683544304,28.2025316455696,28.6075949367089,29.0126582278481,29.4177215189873,29.8227848101266,30.2278481012658,30.6329113924051,31.0379746835443,31.4430379746835,31.8481012658228,32.253164556962,32.6582278481013,33.0632911392405,33.4683544303797,33.873417721519,34.2784810126582,34.6835443037975,35.0886075949367,35.4936708860759,35.8987341772152,36.3037974683544,36.7088607594937,37.1139240506329,37.5189873417722,37.9240506329114,38.3291139240506,38.7341772151899,39.1392405063291,39.5443037974684,39.9493670886076,40.3544303797468,40.7594936708861,41.1645569620253,41.5696202531646,41.9746835443038,42.379746835443,42.7848101265823,43.1898734177215,43.5949367088608,44],\"y\":[9.04283093208307,9.31957791401808,9.59632489595309,9.8730718778881,10.1498188598231,10.4265658417581,10.7033128236931,10.9800598056282,11.2568067875632,11.5335537694982,11.8103007514332,12.0870477333682,12.3637947153032,12.6405416972382,12.9172886791732,13.1940356611082,13.4707826430433,13.7475296249783,14.0242766069133,14.3010235888483,14.5777705707833,14.8545175527183,15.1312645346533,15.4080115165883,15.6847584985234,15.9615054804584,16.2382524623934,16.5149994443284,16.7917464262634,17.0684934081984,17.3452403901334,17.6219873720684,17.8987343540034,18.1754813359385,18.4522283178735,18.7289752998085,19.0057222817435,19.2824692636785,19.5592162456135,19.8359632275485,20.1127102094835,20.3894571914186,20.6662041733536,20.9429511552886,21.2196981372236,21.4964451191586,21.7731921010936,22.0499390830286,22.3266860649636,22.6034330468987,22.8801800288337,23.1569270107687,23.4336739927037,23.7104209746387,23.9871679565737,24.2639149385087,24.5406619204437,24.8174089023787,25.0941558843138,25.3709028662488,25.6476498481838,25.9243968301188,26.2011438120538,26.4778907939888,26.7546377759238,27.0313847578588,27.3081317397939,27.5848787217289,27.8616257036639,28.1383726855989,28.4151196675339,28.6918666494689,28.9686136314039,29.2453606133389,29.5221075952739,29.798854577209,30.075601559144,30.352348541079,30.629095523014,30.905842504949],\"text\":[\"hwy: 12.00000<br />cty:  9.042831\",\"hwy: 12.40506<br />cty:  9.319578\",\"hwy: 12.81013<br />cty:  9.596325\",\"hwy: 13.21519<br />cty:  9.873072\",\"hwy: 13.62025<br />cty: 10.149819\",\"hwy: 14.02532<br />cty: 10.426566\",\"hwy: 14.43038<br />cty: 10.703313\",\"hwy: 14.83544<br />cty: 10.980060\",\"hwy: 15.24051<br />cty: 11.256807\",\"hwy: 15.64557<br />cty: 11.533554\",\"hwy: 16.05063<br />cty: 11.810301\",\"hwy: 16.45570<br />cty: 12.087048\",\"hwy: 16.86076<br />cty: 12.363795\",\"hwy: 17.26582<br />cty: 12.640542\",\"hwy: 17.67089<br />cty: 12.917289\",\"hwy: 18.07595<br />cty: 13.194036\",\"hwy: 18.48101<br />cty: 13.470783\",\"hwy: 18.88608<br />cty: 13.747530\",\"hwy: 19.29114<br />cty: 14.024277\",\"hwy: 19.69620<br />cty: 14.301024\",\"hwy: 20.10127<br />cty: 14.577771\",\"hwy: 20.50633<br />cty: 14.854518\",\"hwy: 20.91139<br />cty: 15.131265\",\"hwy: 21.31646<br />cty: 15.408012\",\"hwy: 21.72152<br />cty: 15.684758\",\"hwy: 22.12658<br />cty: 15.961505\",\"hwy: 22.53165<br />cty: 16.238252\",\"hwy: 22.93671<br />cty: 16.514999\",\"hwy: 23.34177<br />cty: 16.791746\",\"hwy: 23.74684<br />cty: 17.068493\",\"hwy: 24.15190<br />cty: 17.345240\",\"hwy: 24.55696<br />cty: 17.621987\",\"hwy: 24.96203<br />cty: 17.898734\",\"hwy: 25.36709<br />cty: 18.175481\",\"hwy: 25.77215<br />cty: 18.452228\",\"hwy: 26.17722<br />cty: 18.728975\",\"hwy: 26.58228<br />cty: 19.005722\",\"hwy: 26.98734<br />cty: 19.282469\",\"hwy: 27.39241<br />cty: 19.559216\",\"hwy: 27.79747<br />cty: 19.835963\",\"hwy: 28.20253<br />cty: 20.112710\",\"hwy: 28.60759<br />cty: 20.389457\",\"hwy: 29.01266<br />cty: 20.666204\",\"hwy: 29.41772<br />cty: 20.942951\",\"hwy: 29.82278<br />cty: 21.219698\",\"hwy: 30.22785<br />cty: 21.496445\",\"hwy: 30.63291<br />cty: 21.773192\",\"hwy: 31.03797<br />cty: 22.049939\",\"hwy: 31.44304<br />cty: 22.326686\",\"hwy: 31.84810<br />cty: 22.603433\",\"hwy: 32.25316<br />cty: 22.880180\",\"hwy: 32.65823<br />cty: 23.156927\",\"hwy: 33.06329<br />cty: 23.433674\",\"hwy: 33.46835<br />cty: 23.710421\",\"hwy: 33.87342<br />cty: 23.987168\",\"hwy: 34.27848<br />cty: 24.263915\",\"hwy: 34.68354<br />cty: 24.540662\",\"hwy: 35.08861<br />cty: 24.817409\",\"hwy: 35.49367<br />cty: 25.094156\",\"hwy: 35.89873<br />cty: 25.370903\",\"hwy: 36.30380<br />cty: 25.647650\",\"hwy: 36.70886<br />cty: 25.924397\",\"hwy: 37.11392<br />cty: 26.201144\",\"hwy: 37.51899<br />cty: 26.477891\",\"hwy: 37.92405<br />cty: 26.754638\",\"hwy: 38.32911<br />cty: 27.031385\",\"hwy: 38.73418<br />cty: 27.308132\",\"hwy: 39.13924<br />cty: 27.584879\",\"hwy: 39.54430<br />cty: 27.861626\",\"hwy: 39.94937<br />cty: 28.138373\",\"hwy: 40.35443<br />cty: 28.415120\",\"hwy: 40.75949<br />cty: 28.691867\",\"hwy: 41.16456<br />cty: 28.968614\",\"hwy: 41.56962<br />cty: 29.245361\",\"hwy: 41.97468<br />cty: 29.522108\",\"hwy: 42.37975<br />cty: 29.798855\",\"hwy: 42.78481<br />cty: 30.075602\",\"hwy: 43.18987<br />cty: 30.352349\",\"hwy: 43.59494<br />cty: 30.629096\",\"hwy: 44.00000<br />cty: 30.905843\"],\"type\":\"scatter\",\"mode\":\"lines\",\"name\":\"fitted values\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(51,102,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[12,12.4050632911392,12.8101265822785,13.2151898734177,13.620253164557,14.0253164556962,14.4303797468354,14.8354430379747,15.2405063291139,15.6455696202532,16.0506329113924,16.4556962025316,16.8607594936709,17.2658227848101,17.6708860759494,18.0759493670886,18.4810126582278,18.8860759493671,19.2911392405063,19.6962025316456,20.1012658227848,20.506329113924,20.9113924050633,21.3164556962025,21.7215189873418,22.126582278481,22.5316455696203,22.9367088607595,23.3417721518987,23.746835443038,24.1518987341772,24.5569620253165,24.9620253164557,25.3670886075949,25.7721518987342,26.1772151898734,26.5822784810127,26.9873417721519,27.3924050632911,27.7974683544304,28.2025316455696,28.6075949367089,29.0126582278481,29.4177215189873,29.8227848101266,30.2278481012658,30.6329113924051,31.0379746835443,31.4430379746835,31.8481012658228,32.253164556962,32.6582278481013,33.0632911392405,33.4683544303797,33.873417721519,34.2784810126582,34.6835443037975,35.0886075949367,35.4936708860759,35.8987341772152,36.3037974683544,36.7088607594937,37.1139240506329,37.5189873417722,37.9240506329114,38.3291139240506,38.7341772151899,39.1392405063291,39.5443037974684,39.9493670886076,40.3544303797468,40.7594936708861,41.1645569620253,41.5696202531646,41.9746835443038,42.379746835443,42.7848101265823,43.1898734177215,43.5949367088608,44,44,44,43.5949367088608,43.1898734177215,42.7848101265823,42.379746835443,41.9746835443038,41.5696202531646,41.1645569620253,40.7594936708861,40.3544303797468,39.9493670886076,39.5443037974684,39.1392405063291,38.7341772151899,38.3291139240506,37.9240506329114,37.5189873417722,37.1139240506329,36.7088607594937,36.3037974683544,35.8987341772152,35.4936708860759,35.0886075949367,34.6835443037975,34.2784810126582,33.873417721519,33.4683544303797,33.0632911392405,32.6582278481013,32.253164556962,31.8481012658228,31.4430379746835,31.0379746835443,30.6329113924051,30.2278481012658,29.8227848101266,29.4177215189873,29.0126582278481,28.6075949367089,28.2025316455696,27.7974683544304,27.3924050632911,26.9873417721519,26.5822784810127,26.1772151898734,25.7721518987342,25.3670886075949,24.9620253164557,24.5569620253165,24.1518987341772,23.746835443038,23.3417721518987,22.9367088607595,22.5316455696203,22.126582278481,21.7215189873418,21.3164556962025,20.9113924050633,20.506329113924,20.1012658227848,19.6962025316456,19.2911392405063,18.8860759493671,18.4810126582278,18.0759493670886,17.6708860759494,17.2658227848101,16.8607594936709,16.4556962025316,16.0506329113924,15.6455696202532,15.2405063291139,14.8354430379747,14.4303797468354,14.0253164556962,13.620253164557,13.2151898734177,12.8101265822785,12.4050632911392,12,12],\"y\":[8.69286466539614,8.97933261559524,9.26572062383989,9.55202148816596,9.83822719256839,10.1243288026233,10.4103163477621,10.6961786890465,10.9819033715134,11.267476460581,11.5528823627233,11.838103631747,12.1231207637036,12.4079119859249,12.6924530490933,12.9767170358554,13.2606742053956,13.5442919005759,13.8275345523587,14.1103638243433,14.392738946642,14.6746172902831,14.9559552272086,15.2367093026802,15.5168377134386,15.7963020361912,16.0750690922462,16.3531127773418,16.6304156481581,16.9069700558908,17.182778662093,17.4578542578724,17.7322189143767,18.005902591831,18.278941400789,18.5513757300657,18.8232484341006,19.0946032227479,19.3654833368012,19.6359305378715,19.9059844000582,20.1756818654657,20.4450570140895,20.7141409971324,20.982962087453,21.2515458084061,21.5199151105996,21.7880905738081,22.0560906178311,22.3239317113074,22.5916285714706,22.8591943507262,23.1266408079725,23.3939784639721,23.6612167409779,23.9283640873693,24.1954280883632,24.46241556401,24.7293326557222,24.9961849025556,25.2629773083928,25.529714401089,25.7964002845441,26.0630386845598,26.3296329892508,26.5961862846849,26.8627013863474,27.1291808669495,27.3956270810369,27.6620421867953,27.9284281653979,28.1947868381983,28.4611198820288,28.7274288428348,28.9937151478442,29.2599801164441,29.5262249699185,29.7924508401782,30.058658777599,30.3248497580702,30.3248497580702,31.4868352518278,31.1995322684289,30.9122462419798,30.6249781483694,30.3377290379738,30.0505000427036,29.763292383843,29.4761073807791,29.1889464607395,28.9018111696699,28.6147031844025,28.3276243262908,28.0405765765082,27.7535620932403,27.4665832310328,27.1796425625969,26.8927429034178,26.6058873395635,26.3190792591485,26.0323223879748,25.7456208299419,25.4589791129053,25.1724022407475,24.8858957525243,24.5994657896482,24.3131191721696,24.0268634853053,23.7407071774349,23.4546596708112,23.1687314861967,22.8829343824899,22.5972815120962,22.3117875922491,22.0264690915877,21.7413444299111,21.4564341869941,21.1717613134448,20.8873513326176,20.6032325173714,20.3194360189088,20.0359959172255,19.7529491544258,19.4703353046091,19.1881961293863,18.9065748695513,18.625515234958,18.345060080046,18.0652497936302,17.7861204862645,17.5077021181739,17.230016760506,16.9530772043687,16.676886111315,16.4014358325406,16.1267089247256,15.8526792836081,15.5793137304965,15.3065738420981,15.0344178151536,14.7628021949246,14.4916833533532,14.2210186614679,13.9507673493807,13.6808910806909,13.4113542863611,13.1421243092532,12.8731714085515,12.6044686669028,12.3359918349894,12.0677191401431,11.7996310784154,11.5317102036129,11.2639409222098,10.9963092996242,10.728802880893,10.4614105270778,10.1941222676103,9.92692916806629,9.65982321244092,9.39279719877,8.69286466539614],\"text\":[\"hwy: 12.00000<br />cty:  9.042831\",\"hwy: 12.40506<br />cty:  9.319578\",\"hwy: 12.81013<br />cty:  9.596325\",\"hwy: 13.21519<br />cty:  9.873072\",\"hwy: 13.62025<br />cty: 10.149819\",\"hwy: 14.02532<br />cty: 10.426566\",\"hwy: 14.43038<br />cty: 10.703313\",\"hwy: 14.83544<br />cty: 10.980060\",\"hwy: 15.24051<br />cty: 11.256807\",\"hwy: 15.64557<br />cty: 11.533554\",\"hwy: 16.05063<br />cty: 11.810301\",\"hwy: 16.45570<br />cty: 12.087048\",\"hwy: 16.86076<br />cty: 12.363795\",\"hwy: 17.26582<br />cty: 12.640542\",\"hwy: 17.67089<br />cty: 12.917289\",\"hwy: 18.07595<br />cty: 13.194036\",\"hwy: 18.48101<br />cty: 13.470783\",\"hwy: 18.88608<br />cty: 13.747530\",\"hwy: 19.29114<br />cty: 14.024277\",\"hwy: 19.69620<br />cty: 14.301024\",\"hwy: 20.10127<br />cty: 14.577771\",\"hwy: 20.50633<br />cty: 14.854518\",\"hwy: 20.91139<br />cty: 15.131265\",\"hwy: 21.31646<br />cty: 15.408012\",\"hwy: 21.72152<br />cty: 15.684758\",\"hwy: 22.12658<br />cty: 15.961505\",\"hwy: 22.53165<br />cty: 16.238252\",\"hwy: 22.93671<br />cty: 16.514999\",\"hwy: 23.34177<br />cty: 16.791746\",\"hwy: 23.74684<br />cty: 17.068493\",\"hwy: 24.15190<br />cty: 17.345240\",\"hwy: 24.55696<br />cty: 17.621987\",\"hwy: 24.96203<br />cty: 17.898734\",\"hwy: 25.36709<br />cty: 18.175481\",\"hwy: 25.77215<br />cty: 18.452228\",\"hwy: 26.17722<br />cty: 18.728975\",\"hwy: 26.58228<br />cty: 19.005722\",\"hwy: 26.98734<br />cty: 19.282469\",\"hwy: 27.39241<br />cty: 19.559216\",\"hwy: 27.79747<br />cty: 19.835963\",\"hwy: 28.20253<br />cty: 20.112710\",\"hwy: 28.60759<br />cty: 20.389457\",\"hwy: 29.01266<br />cty: 20.666204\",\"hwy: 29.41772<br />cty: 20.942951\",\"hwy: 29.82278<br />cty: 21.219698\",\"hwy: 30.22785<br />cty: 21.496445\",\"hwy: 30.63291<br />cty: 21.773192\",\"hwy: 31.03797<br />cty: 22.049939\",\"hwy: 31.44304<br />cty: 22.326686\",\"hwy: 31.84810<br />cty: 22.603433\",\"hwy: 32.25316<br />cty: 22.880180\",\"hwy: 32.65823<br />cty: 23.156927\",\"hwy: 33.06329<br />cty: 23.433674\",\"hwy: 33.46835<br />cty: 23.710421\",\"hwy: 33.87342<br />cty: 23.987168\",\"hwy: 34.27848<br />cty: 24.263915\",\"hwy: 34.68354<br />cty: 24.540662\",\"hwy: 35.08861<br />cty: 24.817409\",\"hwy: 35.49367<br />cty: 25.094156\",\"hwy: 35.89873<br />cty: 25.370903\",\"hwy: 36.30380<br />cty: 25.647650\",\"hwy: 36.70886<br />cty: 25.924397\",\"hwy: 37.11392<br />cty: 26.201144\",\"hwy: 37.51899<br />cty: 26.477891\",\"hwy: 37.92405<br />cty: 26.754638\",\"hwy: 38.32911<br />cty: 27.031385\",\"hwy: 38.73418<br />cty: 27.308132\",\"hwy: 39.13924<br />cty: 27.584879\",\"hwy: 39.54430<br />cty: 27.861626\",\"hwy: 39.94937<br />cty: 28.138373\",\"hwy: 40.35443<br />cty: 28.415120\",\"hwy: 40.75949<br />cty: 28.691867\",\"hwy: 41.16456<br />cty: 28.968614\",\"hwy: 41.56962<br />cty: 29.245361\",\"hwy: 41.97468<br />cty: 29.522108\",\"hwy: 42.37975<br />cty: 29.798855\",\"hwy: 42.78481<br />cty: 30.075602\",\"hwy: 43.18987<br />cty: 30.352349\",\"hwy: 43.59494<br />cty: 30.629096\",\"hwy: 44.00000<br />cty: 30.905843\",\"hwy: 44.00000<br />cty: 30.905843\",\"hwy: 44.00000<br />cty: 30.905843\",\"hwy: 43.59494<br />cty: 30.629096\",\"hwy: 43.18987<br />cty: 30.352349\",\"hwy: 42.78481<br />cty: 30.075602\",\"hwy: 42.37975<br />cty: 29.798855\",\"hwy: 41.97468<br />cty: 29.522108\",\"hwy: 41.56962<br />cty: 29.245361\",\"hwy: 41.16456<br />cty: 28.968614\",\"hwy: 40.75949<br />cty: 28.691867\",\"hwy: 40.35443<br />cty: 28.415120\",\"hwy: 39.94937<br />cty: 28.138373\",\"hwy: 39.54430<br />cty: 27.861626\",\"hwy: 39.13924<br />cty: 27.584879\",\"hwy: 38.73418<br />cty: 27.308132\",\"hwy: 38.32911<br />cty: 27.031385\",\"hwy: 37.92405<br />cty: 26.754638\",\"hwy: 37.51899<br />cty: 26.477891\",\"hwy: 37.11392<br />cty: 26.201144\",\"hwy: 36.70886<br />cty: 25.924397\",\"hwy: 36.30380<br />cty: 25.647650\",\"hwy: 35.89873<br />cty: 25.370903\",\"hwy: 35.49367<br />cty: 25.094156\",\"hwy: 35.08861<br />cty: 24.817409\",\"hwy: 34.68354<br />cty: 24.540662\",\"hwy: 34.27848<br />cty: 24.263915\",\"hwy: 33.87342<br />cty: 23.987168\",\"hwy: 33.46835<br />cty: 23.710421\",\"hwy: 33.06329<br />cty: 23.433674\",\"hwy: 32.65823<br />cty: 23.156927\",\"hwy: 32.25316<br />cty: 22.880180\",\"hwy: 31.84810<br />cty: 22.603433\",\"hwy: 31.44304<br />cty: 22.326686\",\"hwy: 31.03797<br />cty: 22.049939\",\"hwy: 30.63291<br />cty: 21.773192\",\"hwy: 30.22785<br />cty: 21.496445\",\"hwy: 29.82278<br />cty: 21.219698\",\"hwy: 29.41772<br />cty: 20.942951\",\"hwy: 29.01266<br />cty: 20.666204\",\"hwy: 28.60759<br />cty: 20.389457\",\"hwy: 28.20253<br />cty: 20.112710\",\"hwy: 27.79747<br />cty: 19.835963\",\"hwy: 27.39241<br />cty: 19.559216\",\"hwy: 26.98734<br />cty: 19.282469\",\"hwy: 26.58228<br />cty: 19.005722\",\"hwy: 26.17722<br />cty: 18.728975\",\"hwy: 25.77215<br />cty: 18.452228\",\"hwy: 25.36709<br />cty: 18.175481\",\"hwy: 24.96203<br />cty: 17.898734\",\"hwy: 24.55696<br />cty: 17.621987\",\"hwy: 24.15190<br />cty: 17.345240\",\"hwy: 23.74684<br />cty: 17.068493\",\"hwy: 23.34177<br />cty: 16.791746\",\"hwy: 22.93671<br />cty: 16.514999\",\"hwy: 22.53165<br />cty: 16.238252\",\"hwy: 22.12658<br />cty: 15.961505\",\"hwy: 21.72152<br />cty: 15.684758\",\"hwy: 21.31646<br />cty: 15.408012\",\"hwy: 20.91139<br />cty: 15.131265\",\"hwy: 20.50633<br />cty: 14.854518\",\"hwy: 20.10127<br />cty: 14.577771\",\"hwy: 19.69620<br />cty: 14.301024\",\"hwy: 19.29114<br />cty: 14.024277\",\"hwy: 18.88608<br />cty: 13.747530\",\"hwy: 18.48101<br />cty: 13.470783\",\"hwy: 18.07595<br />cty: 13.194036\",\"hwy: 17.67089<br />cty: 12.917289\",\"hwy: 17.26582<br />cty: 12.640542\",\"hwy: 16.86076<br />cty: 12.363795\",\"hwy: 16.45570<br />cty: 12.087048\",\"hwy: 16.05063<br />cty: 11.810301\",\"hwy: 15.64557<br />cty: 11.533554\",\"hwy: 15.24051<br />cty: 11.256807\",\"hwy: 14.83544<br />cty: 10.980060\",\"hwy: 14.43038<br />cty: 10.703313\",\"hwy: 14.02532<br />cty: 10.426566\",\"hwy: 13.62025<br />cty: 10.149819\",\"hwy: 13.21519<br />cty:  9.873072\",\"hwy: 12.81013<br />cty:  9.596325\",\"hwy: 12.40506<br />cty:  9.319578\",\"hwy: 12.00000<br />cty:  9.042831\",\"hwy: 12.00000<br />cty:  9.042831\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"transparent\",\"dash\":\"solid\"},\"fill\":\"toself\",\"fillcolor\":\"rgba(153,153,153,0.4)\",\"hoveron\":\"points\",\"hoverinfo\":\"x+y\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":27.8721461187215,\"r\":7.30593607305936,\"b\":41.8264840182648,\"l\":37.2602739726027},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[10.4,45.6],\"tickmode\":\"array\",\"ticktext\":[\"20\",\"30\",\"40\"],\"tickvals\":[20,30,40],\"categoryorder\":\"array\",\"categoryarray\":[\"20\",\"30\",\"40\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"hwy\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[7.37750789866595,36.3153567667302],\"tickmode\":\"array\",\"ticktext\":[\"10\",\"20\",\"30\"],\"tickvals\":[10,20,30],\"categoryorder\":\"array\",\"categoryarray\":[\"10\",\"20\",\"30\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"cty\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"929367e0bf\":{\"x\":{},\"y\":{},\"type\":\"scatter\"},\"9294a52a42a\":{\"x\":{},\"y\":{}}},\"cur_data\":\"929367e0bf\",\"visdat\":{\"929367e0bf\":[\"function (y) \",\"x\"],\"9294a52a42a\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nGeom\nTemos vários! VÁRIOS! Vou mostrar alguns mais comuns:\ngeom_point(): gráficos de dispersão.\n\n\nmpg %>% \n  ggplot(aes(cyl)) +\n  geom_point(aes(y = hwy), shape = 3, color = \"steelblue\") +\n  geom_point(aes(y = cty), shape = 1, color = \"red\")\n\n\n\n\ngeom_smooth(): ajusta uma linha de tendêndia (suavizada ou linear) aos dados e a exibe junto com o seu erro padrão. Muitas vezes usado em conjunto com o geom_point().\n\n\nggplot(mpg, aes(displ, hwy, colour = class)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\ngeom_boxplot(): diagrama de caixa, o queridinho dos estatísticos (idealizado por John Tukey).\n\n\nmpg %>% \n  ggplot(aes(class, hwy, colour = class)) +\n  geom_boxplot()\n\n\n\n\ngeom_histogram() e geom_density(): distribuição de variáveis contínuas, intervalares ou ordinais.\n\n\nmpg %>% \n  ggplot(aes(hwy)) +\n  geom_histogram(bins = 30)\n\n\n\n\n\n\nmpg %>% \n  ggplot(aes(hwy)) +\n  geom_density(fill = \"steelblue\")\n\n\n\n\ngeom_bar(): distribuição de variáveis discretas, qualitativas, categóricas ou nominais. geom_bar() por padrão conta a frequência das ocorrências mas você pode usar qualquer outra maneira de contagem com o geom_col().\n\n\nmpg %>% \n  ggplot(aes(class)) +\n  geom_bar()\n\n\n\n\n\n\nlibrary(forcats)\nmpg %>% \n  count(class) %>% \n  mutate(class = as.factor(class),\n         class = fct_reorder(class, n, .desc = TRUE)) %>% \n  ggplot(aes(class, n)) +\n  geom_col()\n\n\n\n\ngeom_line(): desenha linhas entre as observacões. Muito “abusado”. Tentem usar apenas para séries temporais #ficaadica.\n\n\neconomics %>% \n  ggplot(aes(date, unemploy)) +\n  geom_line()\n\n\n\n\nEstéticas com aes()\nAlém de x e y temos outros atributos como:\ncolour: cores (cuidado pois as vezes pessoas confundem com fill)\n\n\nmpg %>% \n  ggplot(aes(cyl, hwy, colour = class)) +\n  geom_point()\n\n\n\n\nfill: preenchimento\n\n\nmpg %>% \n  ggplot(aes(class, fill = manufacturer)) +\n  geom_bar()\n\n\n\n\nshape: forma\n\n\nmpg %>% \n  ggplot(aes(cyl, cty, shape = class)) +\n  geom_point()\n\n\n\n\nsize: tamanho\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point()\n\n\n\n\nAtributos dentro e fora do aes()\nVejam abaixo o que vai acontecer!\n\n\nmpg %>% \n  ggplot() +\n  geom_point(aes(displ, hwy, colour =  \"steelblue\"))\n\n\n\n\n\n\nmpg %>% \n  ggplot() +\n  geom_point(aes(hwy, displ), color = \"steelblue\", size = 5)\n\n\n\n\nRótulos com labs()\nTeoricamente você precisa somente de ggplot(aes(... )) + geom_*(). Mas à vezes é legal customizar o gráfico com mais informações ou alterar alguma coisa.\n{ggplot2} fornece a função auxiliar labs() para definir o nome para uma ou mais escalas, usando pares nome-valor como x = \"eixo X\" ou fill = \"legenda do preenchimento\". Além disso, você pode adicionar NULL para remover o rótulo:\ntitle: título\nsubtitle: subtítulo\nx: eixo X\ny: eixo Y\ncaption: “rubrica”\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  labs(\n    title = \"Um gráfico bonito\",\n    subtitle = \"... é aquele que tem subtítulos\",\n    caption = \" ... juntamente com \\\"rubricas\\\"\",\n    x = \"Deslocamento Volumétrico\",\n    y = \"Autonomia em Milhas por Galão\",\n    colour = \"Tipo de Carro\",\n    size = \"QTD Cilindros\"\n  )\n\n\n\n\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  labs(\n    title = NULL,\n    subtitle = NULL,\n    caption = NULL,\n    x = NULL,\n    y = NULL,\n    colour = NULL,\n    size = NULL\n  )\n\n\n\n\nFacetação com facet_wrap()\nOutra técnica para exibir variáveis categóricas adicionais em um gráfico é a facetação. A facetação cria tabelas de gráficos dividindo os dados em subconjuntos e exibindo o mesmo gráfico para cada subconjunto.\nPara facetar um gráfico, você simplesmente adiciona uma especificação de facetamento com facet_wrap(), que leva o nome de uma variável precedida por ~.\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  facet_wrap(~class)\n\n\n\n\nfacet_wrap() tem alguns argumentos interessentes:\nnrow ou ncol\nscales controla os eixos x e y\nlabeller controla o “subtítulo” da “faceta”\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  facet_wrap(~class,\n             ncol = 2,               # mutuamente exclusivo de `nrow`\n             scales = \"free\",        # cada faceta tem seu eixo x e y\n             labeller = \"label_both\" # traz o label da \"facet\" junto com o valor das classes da faceta\n             )\n\n\n\n\nVocê pode colocar mais facets. Quando você tem mais variáveis o labeller = \"label_value\" funciona muito bem.\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  facet_wrap(~class + cyl,\n             labeller = \"label_both\")\n\n\n\n\nCustomização de Temas com theme()\nO sistema de temas é composto por quatro componentes principais:\nOs elementos do tema especificam os elementos que não são de dados que você pode controlar. Por exemplo, o elemento plot.title controla a aparência do título do gráfico; axis.ticks.x, os ticks no eixo x; legend.key.height, a altura das chaves na legenda.\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  labs(title = \"Algum título que eu vou querer em Comic Sans\") +\n  facet_wrap(~class + cyl,\n             labeller = \"label_both\") +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(family = \"Comic Sans MS\"),\n        axis.ticks.x = element_line(colour = \"purple\",\n                                    arrow = arrow(\n                                      length = unit(\n                                        1, \"mm\"))))\n\n\n\n\nCada elemento está associado a uma função de elemento, que descreve as propriedades visuais do elemento. Por exemplo, element_text () define o tamanho da fonte, a cor e a face dos elementos de texto como plot.title.\nA função theme () que permite substituir os elementos do tema padrão chamando funções de elemento, como theme(plot.title = element_text (color = \"red\"))\nTemas completos, como theme_grey(), para definir todos os elementos do tema para valores projetados para trabalhar de maneira harmônica.\n\n\nmpg %>% \n  ggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point() +\n  theme_classic() # gosto bastante\n\n\n\n\nEscalas com o scale_*_*()\nAs escalas controlam os detalhes de como os valores dos dados são convertidos em propriedades visuais. Temos várias, veja a documentação. Mas vou destacar algumas que uso bastante:\nscale_y_log10(): põe o eixo y numa escala logarítima (parece que isso tá na moda com o COVID).\n\n\neconomics %>% \n  ggplot(aes(date, unemploy)) +\n  geom_line() +\n  scale_y_log10()\n\n\n\n\nscale_fill_brewer() e scale_colour_brewer(): usa as escalas de cores do Color Brewer 2.0.\n\n\nmpg %>% \nggplot(aes(displ, hwy, colour = class)) + \n  geom_point(alpha = 0.5) +\n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\nscale_fill_viridis_c() e scale_colour_viridis_c(): usa as escalas de cores opensource do Matplotlib\n\n\nmpg %>% \nggplot(aes(displ, hwy, colour = as.factor(cyl))) + \n  geom_point() +\n  scale_colour_viridis_d(option = \"E\") # cividis que é inclusivo de quem tem \"dificuldades\" de cores\n\n\n\n\nVamos arrumar o gráfico anterior:\n\n\nmpg %>% \nggplot(aes(displ, hwy, colour = class, size = cyl)) + \n  geom_point(alpha = 0.5) +\n  scale_size(range = c(1, 3))\n\n\n\n\nMais escalas com o {scales}\nO pacote {scales} fornece a infraestrutura de escala interna usada pelo {ggplot2} e fornece ferramentas para substituir os valores padrões de breaks, labels, transformations etc.\nlabel_percent(): converte os rótulos de um eixo para percentuais.\n\n\neconomics %>%\n  ggplot(aes(date, unemploy / pop)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 0.01, decimal.mark = \",\")) +\n  labs(y = \"% de Desempregados da Pop Total\")\n\n\n\n\nlabel_scientific(): converte os rótulos de um eixo para notação científica (1e05, 1.5e-02 etc.).\nlabel_dollar(): converte os rótulos de um eixo para valores de moeda (U$, R$ etc.)\n\n\neconomics %>% \n  ggplot(aes(date, pce)) +\n  geom_line() +\n  scale_y_continuous(\n    labels = scales::label_dollar(prefix = \"R$ \",\n                                  suffix = \" bi\",\n                                  decimal.mark = \".\")\n  )\n\n\n\n\n“Como é que salva?” ggsave()\nSó usar o ggsave(dpi = 300)\nCompor múltiplos gráficos com {patchwork}\nO pacote {patchwork} tem como objetivo tornar ridiculamente simples combinar gráficos {ggplot2} em um mesmo gráfico.\nÉ apenas usando operadores aritméticos e relacionais já conhecidos como se fosse uma álgebra de gráficos: (), +, /, | etc.\n\n\nlibrary(patchwork)\np1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))\np2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))\np3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))\np4 <- ggplot(mtcars) + geom_bar(aes(carb))\n\n(p1 | p2 | p4) / p3 +\n  plot_annotation(title = \"Quatro gráficos legais\",\n                  tag_levels = \"I\", tag_prefix = \"Fig. \") +\n  plot_layout(nrow = 2, widths = c(1, 3),\n              heights = c(2, 1))\n\n\n\n\nFree Samples\nVocês já sabem tudo o que é necessário para fazerem visualizações perfeitas no {ggplot2}. Mas tem alguns outros pacotes que valhe a pena aprender.\n{ggrepel}: geoms para {ggplot2} para repelir rótulos de texto sobrepostos.\n\n\nlibrary(ggrepel)\nggplot(mtcars, aes(wt, mpg, label = rownames(mtcars))) +\n  geom_label_repel() +\n  geom_point(color = 'red') +\n  theme_classic(base_size = 12)\n\n\n\n\nDá para fazer uma gambiarra\n\n\nlibrary(stringr)\nggplot(mtcars, aes(wt, mpg, label = if_else(str_detect(rownames(mtcars), \"Merc\"), rownames(mtcars), NA_character_))) +\n  geom_text_repel() +\n  geom_point(color = 'red') +\n  theme_classic(base_size = 12)\n\n\n\n\n{gghighlight}: destacar geoms no {ggplot2}.\n\n\nset.seed(2)\nd <- purrr::map_dfr(\n  letters,\n  ~ tibble::tibble(\n      idx = 1:400,\n      value = cumsum(runif(400, -1, 1)),\n      type = .,\n      flag = sample(c(TRUE, FALSE), size = 400, replace = TRUE)\n    )\n)\nd %>%\n  ggplot(aes(idx, value, colour = type)) +\n  geom_line()\n\n\n\n\nEu posso filtrar?\n\n\nd %>%\n  filter(type %in% c(\"g\", \"s\")) %>% \n  ggplot(aes(idx, value, colour = type)) +\n  geom_line()\n\n\n\n\nA solução é usar o {gghighlight}:\n\n\nlibrary(gghighlight)\nd %>%\n  ggplot(aes(idx, value, colour = type)) +\n  geom_line() +\n  gghighlight(max(abs(value)) >= 20)\n\n\n\n\n{ggExtra}: histogramas marginais em gráficos de dispersão.\n\n\nlibrary(ggExtra)\nplot <- mpg %>% \n  ggplot(aes(hwy, cty)) +\n  geom_point(colour = \"steelblue\") \nggMarginal(plot)\n\n\n\n\n{ggridges}: um dos meus preferidos! Gráficos de densidade múltiplos.\n\n\nlibrary(ggridges)\ndiamonds %>% \n  ggplot(aes(price, cut, fill = as.factor(cut))) +\n  geom_density_ridges() +\n  scale_x_continuous(labels = scales::label_dollar()) +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3\nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C          \n [3] LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8    \n [5] LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C             \n [9] LC_ADDRESS=C           LC_TELEPHONE=C        \n[11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n [1] ggridges_0.5.3    ggExtra_0.9       gghighlight_0.3.1\n [4] stringr_1.4.0     ggrepel_0.9.1     patchwork_1.1.1  \n [7] forcats_0.5.1     plotly_4.9.3      dplyr_1.0.5      \n[10] ggplot2_3.3.3    \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.6         lattice_0.20-41    tidyr_1.1.3       \n [4] png_0.1-7          assertthat_0.2.1   digest_0.6.27     \n [7] utf8_1.2.1         mime_0.10          plyr_1.8.6        \n[10] R6_2.5.0           evaluate_0.14      httr_1.4.2        \n[13] highr_0.8          pillar_1.5.1       rlang_0.4.10      \n[16] lazyeval_0.2.2     data.table_1.14.0  miniUI_0.1.1.1    \n[19] jquerylib_0.1.3    Matrix_1.2-18      rmarkdown_2.7     \n[22] labeling_0.4.2     splines_4.0.3      htmlwidgets_1.5.3 \n[25] munsell_0.5.0      shiny_1.6.0        compiler_4.0.3    \n[28] httpuv_1.5.5       xfun_0.22          pkgconfig_2.0.3   \n[31] mgcv_1.8-33        htmltools_0.5.1.1  downlit_0.2.1     \n[34] tidyselect_1.1.0   tibble_3.1.0       fansi_0.4.2       \n[37] viridisLite_0.3.0  crayon_1.4.1       withr_2.4.1       \n[40] later_1.1.0.1      grid_4.0.3         xtable_1.8-4      \n[43] nlme_3.1-149       jsonlite_1.7.2     gtable_0.3.0      \n[46] lifecycle_1.0.0    DBI_1.1.1          magrittr_2.0.1    \n[49] scales_1.1.1       stringi_1.5.3      farver_2.1.0      \n[52] promises_1.2.0.1   bslib_0.2.4        ellipsis_0.3.1    \n[55] generics_0.1.0     vctrs_0.3.7        distill_1.2       \n[58] RColorBrewer_1.1-2 tools_4.0.3        glue_1.4.2        \n[61] purrr_0.3.4        crosstalk_1.1.1    fastmap_1.1.0     \n[64] yaml_2.2.1         colorspace_2.0-0   knitr_1.31        \n[67] sass_0.3.1        \n\n\n\n\n",
      "last_modified": "2021-04-15T01:03:40+00:00"
    },
    {
      "path": "4-Programacao_Funcional.html",
      "title": "Programação Funcional",
      "description": "purrr e furrr",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 16, 2021",
      "contents": "\n\nContents\nmap_*()\nProfessor, e a ~?\nMOAH POWER! {furrr}\nAmbiente\n\n\n\n\n\nFigure 1: Programação Funcional\n\n\n\n{purrr} tem a seguinte lógica:\nAo invés de:\nfor (i in 1:n) {\n  output[[i]] <- f(input[[i]])\n}\nVocê faz:\nlibrary(purrr)\nlist %>% map(f)    # ou map(list, f)\n\n\nlibrary(purrr)\n1L:10L %>% map(rnorm, 5, 10)\n\n\n[[1]]\n[1] -11.38116\n\n[[2]]\n[1] 13.029668  2.856573\n\n[[3]]\n[1] 10.758397  5.571244 -4.763009\n\n[[4]]\n[1] 19.659442 -1.472249 17.885089 -2.346908\n\n[[5]]\n[1] -1.388816  6.255301 -3.475424 17.935144 -1.549314\n\n[[6]]\n[1]  14.768663   8.329310   8.465768  24.315147 -12.101316   7.390186\n\n[[7]]\n[1]  6.7608059 -6.6035078  0.0735278 11.9206485  2.2138583 -6.9041138\n[7] 14.7165402\n\n[[8]]\n[1]  -4.4990203   8.9216844  -0.6888865  14.2025856  19.5619532\n[6]  25.4041054 -15.4359096   9.6327247\n\n[[9]]\n[1]  20.663960 -15.216816  11.646418  12.675556  11.251517  10.818754\n[7]   2.385407  18.036240  11.447447\n\n[[10]]\n [1] -11.523355  19.664804  -1.211447   2.781161   6.715652   1.754814\n [7]   4.136375 -15.435072  -2.755345  -9.002235\n\nmap() — sempre retorna uma list\nmap_lgl(), map_int(), map_dbl() e map_chr() — retornam um vetor do tipo desejado (conversão implícita)\nmap_dfr() e map_dfc() — retornaram um data.frame concatenando colunas (c) ou linhas (r)\nwalk() — usado para efeitos colaterais (side-effects)\nAlém disso temos o map2* (2 listas de inputs) e o pmap* (lista de vetores de inputs, pode ser um data.frame) para múltiplos inputs.\nmap_*()\nConversão implícita\n\n\n1L:10L %>%\n  map(rnorm) %>%\n  map_dbl(mean) # igual a map_dbl(~mean(.x))\n\n\n [1] -1.2591202 -0.6455529 -0.8104026  0.1503104 -0.7779383  0.5621727\n [7] -0.2535561  0.6294386 -0.5932808 -0.7587242\n\nProfessor, e a ~?\nO tio ~ (em inglês é tilde) ele funciona quando você precisa especificar funções e argumentos mais complexos:\n\n\nc(\"meu\", \"microfone\", \"está\", \"aberto\") %>% # vire um vetor de c(\"meuprefixo_meu\", ...)\n  map_chr(~paste0(\"meuprefixo_\", .x))\n\n\n[1] \"meuprefixo_meu\"       \"meuprefixo_microfone\"\n[3] \"meuprefixo_está\"      \"meuprefixo_aberto\"   \n\n\n\nlibrary(ggplot2)\nc(\"hp\", \"wt\", \"qsec\") %>% \n  map(~mtcars %>% \n        ggplot(aes_string(.x, \"mpg\")) +\n        geom_point() +\n        geom_smooth())\n\n\n[[1]]\n\n\n[[2]]\n\n\n[[3]]\n\n\nAgora é um bom momento para introduzir o purrr::walk\nwalk() — usado para efeitos colaterais (side-effects)\n\n\nc(\"hp\", \"wt\", \"qsec\") %>% \n  walk(~ {p <- mtcars %>% \n        ggplot(aes_string(.x, \"mpg\")) +\n        geom_point() +\n        geom_smooth()\n      print(p)})\n\n\n\n\n\n\ny <- c(\"mpg\", \"cyl\", \"gear\")\n\nc(\"hp\", \"wt\", \"qsec\") %>% \n  walk2(y, ~{p <- mtcars %>% \n        ggplot(aes_string(.x, .y)) +\n        geom_point() +\n        geom_smooth()\n      print(p)})\n\n\n\n\nAgora o purrr::pwalk()\n\n\nx <- c(\"hp\", \"wt\", \"qsec\")\ny <- c(\"mpg\", \"cyl\", \"gear\")\nz <- c(\"vs\", \"am\", \"cyl\")\nlist_v <- list(x, y, z)\n\nlist_v %>% \n  pwalk(~{p <- mtcars %>% \n        ggplot(aes_string(..1, ..2, colour = ..3)) + # e continua ..4 ..5 ..6\n        geom_point() +\n        geom_smooth()\n      print(p)})\n\n\n\n\nAté dá para “knitar” vários markdowns\nc(\"arquivo1.Rmd\", \"arquivo2.Rmd\", ...) %>%    # ou fs::dir_ls(glob = \"*.Rmd\") lê todo o diretório\n  walk(~knitr::render(.x,\n                      output_format = \"html_document\",\n                      output_dir = \"relatorios/\"))\nMOAH POWER! {furrr}\n{purrr} é single-thread então vamos usar o {furrr}.\nPara usar é muito fácil! Ao invés de:\nmap()\nmap2()\npmap()\nwalk()\nUse:\nfuture_map()\nfuture_map2()\nfuture_pmap()\nfuture_walk()\n\n\nseq_len(8) %>% \n  walk(~{\n    Sys.sleep(1)\n    print(\"Oi\")})\n\n\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n\nAgora com o {furrr}:\n\n\nlibrary(furrr)\nplan(multisession) # ou coloque no `.Rprofile` `options(Ncpus = parallel::detectCores())` e `options(mc.cores = parallel::detectCores())`\n\n\n\n\n\nseq_len(8) %>% \n  future_walk(~{\n    Sys.sleep(1)\n    print(\"Oi\")},\n    .progress = TRUE)\n\n\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n[1] \"Oi\"\n\nSe for mexer com coisas aleatórias é importante usar o argumento: * .options = furrr_options(seed = TRUE)\n\n\n1L:10L %>% future_map(rnorm)\n\n\n[[1]]\n[1] 0.814932\n\n[[2]]\n[1] -1.0562436  0.4637372\n\n[[3]]\n[1]  1.6050373  0.9370217 -0.6776278\n\n[[4]]\n[1]  0.7962260  0.7426522 -0.8918861  0.9338568\n\n[[5]]\n[1] -0.1801842  1.4212317 -0.2833755 -1.4184918  1.0582444\n\n[[6]]\n[1]  0.3333963  0.4046944 -0.6520585  0.1045224 -0.3571050  0.2808810\n\n[[7]]\n[1] -1.69271644  0.18286852 -0.28538567  0.01724536 -0.96633697\n[6] -0.68696768  1.73231866\n\n[[8]]\n[1]  0.2561988 -0.6950161  1.0393150 -0.7689563 -1.3695782  0.1937951\n[7] -0.1522291 -0.5333768\n\n[[9]]\n[1]  0.1196148 -0.4576666 -0.7932472 -1.0771695  0.7685329  0.1675055\n[7] -2.0190748  0.1489319  0.6352363\n\n[[10]]\n [1]  0.8202823 -1.3235204 -0.2588914  0.7377599  0.2598685  0.2666640\n [7]  1.4020774 -0.3432135 -0.3737338  0.8059877\n\n\n\n1L:10L %>%\n  future_map(rnorm,\n             .options = furrr_options(seed = TRUE))\n\n\n[[1]]\n[1] -0.1890671\n\n[[2]]\n[1]  0.7072252 -1.7045222\n\n[[3]]\n[1] 0.5836392 0.8149874 0.2078733\n\n[[4]]\n[1] -0.9889491 -1.6149687  0.8757440  0.1799311\n\n[[5]]\n[1]  1.1767969 -1.4136739  1.9540730  0.6239741 -0.4595725\n\n[[6]]\n[1]  0.9372127 -1.6093423  0.1438658 -0.5614448  1.3289207 -1.4216962\n\n[[7]]\n[1]  1.83071509  0.20727462 -0.73679714 -0.04572543  1.11853883\n[6] -1.83680047 -0.05900324\n\n[[8]]\n[1] -0.5128565 -1.7935135  1.3144587 -1.0019108  0.4888807 -0.9534464\n[7] -0.3804608  1.4291638\n\n[[9]]\n[1] -0.6642156  0.3816342  0.1062315 -0.4831790  1.1260858  0.2976840\n[7]  0.2940084 -0.5980869 -0.4259555\n\n[[10]]\n [1]  0.69178552  0.04851470  0.24116786  1.04415916 -0.10173131\n [6]  0.35009766 -1.22750769  0.09546966 -0.55823563  0.99247543\n\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3\nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C          \n [3] LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8    \n [5] LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C             \n [9] LC_ADDRESS=C           LC_TELEPHONE=C        \n[11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] furrr_0.2.2   future_1.21.0 ggplot2_3.3.3 purrr_0.3.4  \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.0  xfun_0.22         bslib_0.2.4      \n [4] listenv_0.8.0     splines_4.0.3     lattice_0.20-41  \n [7] colorspace_2.0-0  vctrs_0.3.7       generics_0.1.0   \n[10] htmltools_0.5.1.1 yaml_2.2.1        mgcv_1.8-33      \n[13] utf8_1.2.1        rlang_0.4.10      jquerylib_0.1.3  \n[16] pillar_1.5.1      glue_1.4.2        withr_2.4.1      \n[19] DBI_1.1.1         lifecycle_1.0.0   stringr_1.4.0    \n[22] munsell_0.5.0     gtable_0.3.0      codetools_0.2-16 \n[25] evaluate_0.14     labeling_0.4.2    knitr_1.31       \n[28] parallel_4.0.3    fansi_0.4.2       highr_0.8        \n[31] scales_1.1.1      jsonlite_1.7.2    farver_2.1.0     \n[34] parallelly_1.24.0 distill_1.2       png_0.1-7        \n[37] digest_0.6.27     stringi_1.5.3     dplyr_1.0.5      \n[40] grid_4.0.3        tools_4.0.3       magrittr_2.0.1   \n[43] sass_0.3.1        tibble_3.1.0      crayon_1.4.1     \n[46] pkgconfig_2.0.3   downlit_0.2.1     ellipsis_0.3.1   \n[49] Matrix_1.2-18     assertthat_0.2.1  rmarkdown_2.7    \n[52] R6_2.5.0          globals_0.14.0    nlme_3.1-149     \n[55] compiler_4.0.3   \n\n\n\n\n",
      "last_modified": "2021-04-17T01:14:10+00:00"
    },
    {
      "path": "5-Regressao.html",
      "title": "Regressão Linear e Regressão Logística",
      "description": "lm e glm",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 19, 2021",
      "contents": "\n\nContents\nRegressão Linear\nInterpretações\nInterpretação Geométrica\nInterpretação Matemática\nExemplo - Score de QI de crianças\n\nRegressão Logística\nExemplo - Propensão a mudar de poço de água contaminado\n\nRegressão de Poisson - Dados de Contagem\nExemplo Poisson - Exterminação de baratas\n\nAmbiente\n\n\n\n\n\nFigure 1: Stats\n\n\n\nRegressão Linear\nRegressão linear permite com que você use uma ou mais variáveis discretas ou contínuas como variáveis independentes e mensurar o poder de associação com a variável dependente, que deve ser contínua.\nInterpretações\nPara compreender regressão linear podemos usar de três interpretações distintas mas complementares:\nInterpretação Geométrica: Regressão como uma reta.\nInterpretação Matemática: Regressão como otimização.\nInterpretação Estatística: Regressão como poder de associação entre variáveis controlando para diversos outros efeitos.\nInterpretação Geométrica\nImagine que seus dados são pontos que vivem em um espaço multidimensional. A regressão é uma técnica para encontrar a melhor reta1 entre o conjunto de dados levando em conta todas as observações.\nIsto é valido para qualquer espaço multidimensional, até para além de 3-D. Vamos mostrar um exemplo em 2-D da relação entre x e y, mas isto poder ser estendido para a relação x1, x2, … e y.\n\n\n\nFigure 2: Uma relação entre variáveis representada por uma reta de tendência\n\n\n\nVejam que regressão linear usando apenas uma variável dependente e uma variável independente é a mesma coisa que que correlação.\nInterpretação Matemática\nA interpretação matemática é vista como uma otimização: encontrar a melhor reta entre os pontos que minimiza o erro quadrático médio (mean squared error – MSE). Ao escolhermos a melhor reta, devemos escolher a melhor reta que minimiza as distâncias entre os pontos, sendo que podemos errar para mais ou para menos. Para evitarmos que os erros se cancelem, precisamos eliminar o sinal negativo de alguns erros e convertê-los para valores positivos. Para isso, pegamos todas os erros (diferenças entre o valor previsto pela reta e o valor verdadeiro) e elevamos ao quadrado (assim todo número negativo se tornará positivo e todo positivo se manterá positivo). Portanto, a regressão se torna a busca do menor valor de uma função erro (MSE).\n\n\n\nFigure 3: A melhor reta que minimiza a distância dos erros\n\n\n\nInterpretação Estatística\nA regressão linear usando uma única variável independente contínua se torna exatamente uma correlação. Agora quando empregamos mais de uma variável independente, a interpretação da regressão se torna: “O efeito de X em Y mantendo Z fixo”. Isto quer dizer que a regressão linear controla os efeitos das diferentes variáveis independentes ao calcular o efeito de uma certa variável independente. Esta é o que chamamos de interpretação estatística da regressão linear.\nPor exemplo, digamos que você esteja em busca dos fatores que acarretam ataque cardíaco. Você coleta dados de pessoas que quantifiquem as seguintes variáveis: sono, stress, tabagismo, sedentarismo, entre outros… A regressão te permite mensurar o efeito de qualquer uma dessas variáveis na prevalência de ataque cardíaco controlando para outros efeitos. Em outras palavras, é possível mensurar o efeito de stress em ataque cardíaco, mantendo fixo os efeitos de sono, tabagismo, sedentarismo, etc… Isso permite você isolar o efeito de uma variável sem deixar que outras variáveis a influenciem na mensuração da sua relação com a variável dependente (no nosso caso: ataque cardíaco).\nExemplo - Score de QI de crianças\nPara o nosso exemplo, usarei um dataset famoso chamado kidiq que está incluído no diretório datasets/. São dados de uma survey de mulheres adultas norte-americanas e seus respectivos filhos. Datado de 2007 possui 434 observações e 4 variáveis:\nkid_score: QI da criança\nmom_hs: binária (0 ou 1) se a mãe possui diploma de ensino médio\nmom_iq: QI da mãe\nmom_age: idade da mãe\nRegressão Logística\nUma regressão logística se comporta exatamente como um modelo linear: faz uma predição simplesmente computando uma soma ponderada das variáveis independentes, mais uma constante. Porém ao invés de retornar um valor contínuo, como a regressão linear, retorna a função logística desse valor.\n\\[\\operatorname{Logística}(x) = \\frac{1}{1 + e^{(-x)}}\\]\nA função logística é uma gambiarra transformação que pega qualquer valor entre menos infinito \\(-\\infty\\) e mais infinito \\(+\\infty\\) e transforma em um valor entre 0 e 1. Veja na figura 4 uma representação gráfica da função logística.\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\ntibble(\n  x = seq(-10, 10, length.out = 100),\n  logit = 1 / (1 + exp(-x))) %>%\n  ggplot(aes(x, logit)) +\n  geom_line()\n\n\n\n\nFigure 4: Função Logística\n\n\n\nOu seja, a função logística é a candidata ideal para quando precisamos converter algo contínuo sem restrições para algo contínuo restrito entre 0 e 1. Por isso ela é usada quando precisamos que um modelo tenha como variável dependente uma probabilidade (lembrando que qualquer numero real entre 0 e 1 é uma probabilidade válida). No caso de uma variável dependente binária, podemos usar essa probabilidade como a chance da variável dependente tomar valor de 0 ou de 1.\nExemplo - Propensão a mudar de poço de água contaminado\nPara exemplo, usaremos um dataset chamado wells que está incluído no diretório datasets/. É uma survey com 3.200 residentes de uma pequena área de Bangladesh na qual os lençóis freáticos estão contaminados por arsênico. Respondentes com altos níveis de arsênico nos seus poços foram encorajados para trocar a sua fonte de água para uma níveis seguros de arsênico.\nPossui as seguintes variáveis:\nswitch: dependente indicando se o respondente trocou ou não de poço\narsenic: nível de arsênico do poço do respondente\ndist: distância em metros da casa do respondente até o poço seguro mais próximo\nassociation: dummy se os membros da casa do respondente fazem parte de alguma organização da comunidade\neduc: quantidade de anos de educação que o chefe da família respondente possui\nRegressão de Poisson - Dados de Contagem\nUma regressão de Poisson se comporta exatamente como um modelo linear: faz uma predição simplesmente computando uma soma ponderada das variáveis independentes \\(\\mathbf{X}\\) pelos coeficientes estimados \\(\\boldsymbol{\\beta}\\), mais uma constante \\(\\alpha\\). Porém ao invés de retornar um valor contínuo \\(y\\), como a regressão linear, retorna o logarítmo natural desse valor \\(\\log(y)\\).\n\\[\n\\log(y)= \\theta_0 + \\theta_1 x_1 + \\theta_2 x_2 + \\dots + \\theta_n x_n\n\\]\nque é o mesmo que\n\\[\ny = e^{(\\theta_0 + \\theta_1 x_1 + \\theta_2 x_2 + \\dots + \\theta_n x_n)}\n\\]\n\\(\\theta\\) - parâmetros do modelo\n\\(\\theta_0\\) - constante\n\\(\\theta_1, \\theta_2, \\dots\\) - coeficientes das variáveis independentes \\(x_1, x_2, \\dots\\)\n\n\\(n\\) - número de variáveis independentes\nA função \\(e^x\\) é chamada de função exponencial. Veja a figura 5 para uma intuição gráfica da função exponencial:\n\n\nggplot(data = tibble(\n  x = seq(0, 10, length.out = 100),\n  y =  exp(x)\n  ),\n  aes(x, y)) +\n  geom_line(size = 2, color = \"steelblue\") +\n  ylab(\"Exponencial(x)\")\n\n\n\n\nFigure 5: Função Exponencial\n\n\n\nRegressão de Poisson é usada quando a nossa variável dependente só pode tomar valores positivos, geralmente em contextos de dados de contagem.\nExemplo Poisson - Exterminação de baratas\nPara exemplo, usaremos um dataset chamado roaches que está incluído no diretório datasets/. É uma base de dados com 262 observações sobre a eficácia de um sistema de controle de pragas em reduzir o número de baratas (roaches) em apartamentos urbanos.\nPossui as seguintes variáveis:\ny: variável dependente - número de baratas mortas\nroach1: número de baratas antes da dedetização\ntreatment: dummy para indicar se o apartamento foi dedetizado ou não\nsenior: dummy para indicar se há apenas idosos no apartamento\nexposure2: número de dias que as armadilhas de baratas foram usadas\nAmbiente\n\n\nsessionInfo()\n\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3\nLAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C          \n [3] LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8    \n [5] LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C             \n [9] LC_ADDRESS=C           LC_TELEPHONE=C        \n[11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] broom_0.7.5     patchwork_1.1.1 dplyr_1.0.5     ggplot2_3.3.3  \n\nloaded via a namespace (and not attached):\n [1] bslib_0.2.4       compiler_4.0.3    pillar_1.5.1     \n [4] jquerylib_0.1.3   highr_0.8         tools_4.0.3      \n [7] digest_0.6.27     downlit_0.2.1     lattice_0.20-41  \n[10] nlme_3.1-149      jsonlite_1.7.2    evaluate_0.14    \n[13] lifecycle_1.0.0   tibble_3.1.0      gtable_0.3.0     \n[16] mgcv_1.8-33       pkgconfig_2.0.3   png_0.1-7        \n[19] rlang_0.4.10      Matrix_1.2-18     DBI_1.1.1        \n[22] distill_1.2       yaml_2.2.1        xfun_0.22        \n[25] withr_2.4.1       stringr_1.4.0     knitr_1.31       \n[28] generics_0.1.0    vctrs_0.3.7       sass_0.3.1       \n[31] tidyselect_1.1.0  grid_4.0.3        glue_1.4.2       \n[34] R6_2.5.0          fansi_0.4.2       rmarkdown_2.7    \n[37] tidyr_1.1.3       farver_2.1.0      purrr_0.3.4      \n[40] magrittr_2.0.1    backports_1.2.1   splines_4.0.3    \n[43] scales_1.1.1      htmltools_0.5.1.1 ellipsis_0.3.1   \n[46] assertthat_0.2.1  colorspace_2.0-0  labeling_0.4.2   \n[49] utf8_1.2.1        stringi_1.5.3     munsell_0.5.0    \n[52] crayon_1.4.1     \n\n\ntecnicamente reta aqui se refere um hiperplano que é subespaço de dimensão \\(n-1\\) de um espaço de dimensão \\(n\\). Por exemplo, uma reta é um hiperplano 1-D de uma plano 2-D; um plano 2-D é um hiperplano de um plano 3-D; e assim por diante…↩︎\n",
      "last_modified": "2021-04-19T21:48:47+00:00"
    },
    {
      "path": "index.html",
      "title": "Linguagem R",
      "description": "Disciplina de Linguaguem R para Ciência de Dados de Pós-Graduação da UNINOVE",
      "author": [
        {
          "name": "Jose Storopoli",
          "url": "https://scholar.google.com/citations?user=xGU7H1QAAAAJ&hl=en"
        }
      ],
      "date": "April 5, 2021",
      "contents": "\n\nContents\nProfessor\nComo usar esse conteúdo?\nAulas\nComo citar esse conteúdo\nLicença\n\n\n\n\n\n\nFigure 1: Linguagem R\n\n\n\nRStudio: \nDisciplina de Análise de Dados com R para alunos de pós-graduação. O conteúdo é todo baseado no universo do {tidyverse}.\nSerá coberto conteúdos sobre leitura, manipulação e exportação de dados com R. Recomendo o livro R para Data Science (Figura 2) que pode ser encontrado gratuitamente aqui e possui uma versão impressa em português.\n\n\n\nFigure 2: R for Data Science\n\n\n\nProfessor\nProf. Dr. José Eduardo Storopoli - Currículo Lattes - ORCID - https://storopoli.io\njosees@uni9.pro.br\nComo usar esse conteúdo?\nEste conteúdo possui licença livre para uso (CC BY-SA). Caso queira utilizar o conteúdo para um curso ou estudos, por favor colabore nesse repositório quaisquer aprimorações que foram realizadas.\nPara configurar um ambiente local:\nClone o repositório do GitHub: git clone https://github.com/storopoli/Linguagem-R.git\nAcesse o diretório: cd Linguagem-R\nInstale os pacotes necessários: Rscript .binder/install.R\nAulas\nAula 1 - O que é R?: Tipos de Varíaveis, Estrutura de Dados, RStudio e Rmarkdown.\nAulas 2 e 3 — Manipulação de Dados: dplyr, readr, tidyr e stringr.\nAulas 4 e 5 — Visualização de Dados: ggplot2, scales, patchwork, e mais.\nAulas 6 — Programação Funcional: purrr e furrr.\nAula 7 — Regressão Linear e Regressão Logística: lm e glm.\nComo citar esse conteúdo\nPara citar o conteúdo use:\nStoropoli (2021). Linguagem R. Disponível em: https://storopoli.io/Linguagem-R.\nOu em formato BibTeX para LaTeX:\n@misc{storopoli2021linguagemR,\n  author = {Storopoli, Jose},\n  title = {Linguagem R},\n  url = {https://storopoli.io/Linguagem-R},\n  year = {2021}\n}\nLicença\nEste obra está licenciado com uma Licença Creative Commons Atribuição-CompartilhaIgual 4.0 Internacional.\n\n\n\n\n",
      "last_modified": "2021-04-06T09:56:32+00:00"
    }
  ],
  "collections": []
}
